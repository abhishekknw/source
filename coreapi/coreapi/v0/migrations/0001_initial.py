# Generated by Django 2.1.4 on 2020-02-25 10:47

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_code', models.CharField(default='0', max_length=255)),
                ('mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('terms_accepted', models.BooleanField(default=False)),
                ('emailVerifyCode', models.CharField(blank=True, max_length=20, null=True)),
                ('emailVerifyDate', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'db_table': 'base_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountInfo',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('account_id', models.CharField(db_column='ACCOUNT_ID', max_length=15, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50)),
                ('phone', models.CharField(blank=True, db_column='PHONE', max_length=10)),
                ('email', models.CharField(blank=True, db_column='EMAILID', max_length=50)),
                ('address', models.CharField(blank=True, db_column='ADDRESS', max_length=100)),
                ('reference_name', models.CharField(blank=True, db_column='REFERENCE_NAME', max_length=50)),
                ('reference_phone', models.CharField(blank=True, db_column='REFERENCE_PHONE', max_length=10)),
                ('reference_email', models.CharField(blank=True, db_column='REFERENCE_EMAIL', max_length=50)),
                ('comments', models.TextField(blank=True, db_column='COMMENTS', max_length=100)),
            ],
            options={
                'db_table': 'account_info',
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
            ],
            options={
                'db_table': 'activity_log',
            },
        ),
        migrations.CreateModel(
            name='AdInventoryLocationMapping',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22)),
                ('adinventory_name', models.CharField(choices=[('POSTER', 'Poster'), ('STANDEE', 'Standee'), ('STALL', 'Stall'), ('CAR DISPLAY', 'Car Display'), ('FLIER', 'Flier'), ('BANNER', 'Banner'), ('POSTER LIFT', 'Poster Lift'), ('GLASS_FACADE', 'GLASS_FACADE'), ('HOARDING', 'HOARDING'), ('DROPDOWN', 'DROPDOWN'), ('STANDEE', 'STANDEE'), ('PROMOTION_DESK', 'PROMOTION_DESK'), ('PILLAR', 'PILLAR'), ('TROLLEY', 'TROLLEY'), ('WALL_INVENTORY', 'WALL_INVENTORY'), ('FLOOR_INVENTORY', 'FLOOR_INVENTORY'), ('GATEWAY ARCH', 'GATEWAY ARCH'), ('SUNBOARD', 'SUNBOARD'), ('BANNER', 'BANNER')], db_column='ADINVENTORY_NAME', default='POSTER', max_length=10)),
            ],
            options={
                'db_table': 'ad_inventory_location_mapping',
            },
        ),
        migrations.CreateModel(
            name='AdInventoryType',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_name', models.CharField(choices=[('POSTER', 'Poster'), ('STANDEE', 'Standee'), ('STALL', 'Stall'), ('CAR DISPLAY', 'Car Display'), ('FLIER', 'Flier'), ('BANNER', 'Banner'), ('POSTER LIFT', 'Poster Lift'), ('GLASS_FACADE', 'GLASS_FACADE'), ('HOARDING', 'HOARDING'), ('DROPDOWN', 'DROPDOWN'), ('STANDEE', 'STANDEE'), ('PROMOTION_DESK', 'PROMOTION_DESK'), ('PILLAR', 'PILLAR'), ('TROLLEY', 'TROLLEY'), ('WALL_INVENTORY', 'WALL_INVENTORY'), ('FLOOR_INVENTORY', 'FLOOR_INVENTORY'), ('GATEWAY ARCH', 'GATEWAY ARCH'), ('SUNBOARD', 'SUNBOARD'), ('BANNER', 'BANNER')], db_column='ADINVENTORY_NAME', default='POSTER', max_length=20)),
                ('adinventory_type', models.CharField(db_column='ADINVENTORY_TYPE', max_length=20)),
            ],
            options={
                'db_table': 'ad_inventory_type',
            },
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('name', models.CharField(max_length=1000)),
                ('code', models.CharField(blank=True, max_length=1000, null=True)),
                ('type', models.CharField(blank=True, choices=[('RS', 'RS'), ('CP', 'CP'), ('GY', 'GY'), ('SA', 'SA'), ('BS', 'BS'), ('RE', 'RE'), ('EI', 'EI')], max_length=10, null=True)),
            ],
            options={
                'db_table': 'amenities',
            },
        ),
        migrations.CreateModel(
            name='AssignedAudits',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('ad_inventory_id', models.CharField(blank=True, db_column='AD_INVENTORY_ID', max_length=50)),
                ('ad_inventory_type', models.CharField(blank=True, db_column='AD_INVENTORY_TYPE', max_length=50, null=True)),
                ('supplier_name', models.CharField(blank=True, db_column='SUPPLIER_NAME', max_length=50)),
                ('ad_location', models.CharField(blank=True, db_column='AD_LOCATION', max_length=50)),
                ('address', models.CharField(blank=True, db_column='ADDRESS', max_length=100)),
                ('date', models.DateField(db_column='DATE', null=True)),
                ('business_name', models.CharField(blank=True, db_column='BUSINESS_NAME', max_length=50)),
                ('audit_type', models.CharField(blank=True, db_column='AUDIT_TYPE', max_length=20)),
                ('image_url', models.CharField(db_column='IMAGE_URL', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AuditDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('audit_date', models.DateTimeField(blank=True, null=True)),
                ('audited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_date',
            },
        ),
        migrations.CreateModel(
            name='AuditorSocietyMapping',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(db_column='USER_ID', null=True)),
            ],
            options={
                'db_table': 'auditor_society_mapping',
            },
        ),
        migrations.CreateModel(
            name='Audits',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('latitude', models.FloatField(db_column='LATITUDE', null=True)),
                ('longitude', models.FloatField(db_column='LONGITUDE', null=True)),
                ('timestamp', models.DateTimeField(db_column='TIMESTAMP', null=True)),
                ('barcode', models.FloatField(db_column='BARCODE', null=True)),
                ('audited_by', models.IntegerField(db_column='USER_ID', null=True)),
                ('audit_type', models.CharField(blank=True, db_column='AUDIT_TYPE', max_length=20)),
                ('image_url', models.CharField(db_column='IMAGE_URL', max_length=100, null=True)),
            ],
            options={
                'db_table': 'audits',
            },
        ),
        migrations.CreateModel(
            name='BannerInventory',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22)),
                ('type', models.CharField(blank=True, db_column='BANNER_TYPE', max_length=20)),
                ('banner_location', models.CharField(blank=True, db_column='BANNER_DISPLAY_LOCATION', max_length=50)),
                ('banner_size', models.CharField(blank=True, db_column='BANNER_SIZE', max_length=10)),
                ('inventory_status', models.CharField(blank=True, db_column='INVENTORY_STATUS', max_length=15)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'banner_inventory',
            },
        ),
        migrations.CreateModel(
            name='BusinessAccountContact',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('object_id', models.CharField(max_length=20)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50)),
                ('designation', models.CharField(blank=True, db_column='DESIGNATION', max_length=20)),
                ('department', models.CharField(blank=True, db_column='DEPARTMENT', max_length=20)),
                ('phone', models.CharField(blank=True, db_column='PHONE', max_length=10)),
                ('email', models.CharField(blank=True, db_column='EMAILID', max_length=50)),
                ('spoc', models.BooleanField(db_column='SPOC', default=False)),
                ('comments', models.TextField(blank=True, db_column='COMMENTS', max_length=100)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'business_account_contact',
            },
        ),
        migrations.CreateModel(
            name='BusinessInfo',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('business_id', models.CharField(db_column='BUSINESS_ID', max_length=15, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50)),
                ('phone', models.CharField(blank=True, db_column='PHONE', max_length=10)),
                ('email', models.CharField(blank=True, db_column='EMAILID', max_length=50)),
                ('address', models.CharField(blank=True, db_column='ADDRESS', max_length=100)),
                ('reference_name', models.CharField(blank=True, db_column='REFERENCE_NAME', max_length=50)),
                ('reference_phone', models.CharField(blank=True, db_column='REFERENCE_PHONE', max_length=10)),
                ('reference_email', models.CharField(blank=True, db_column='REFERENCE_EMAIL', max_length=50)),
                ('comments', models.TextField(blank=True, db_column='COMMENTS', max_length=100)),
            ],
            options={
                'db_table': 'business_info',
            },
        ),
        migrations.CreateModel(
            name='BusinessSubTypes',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('business_sub_type', models.CharField(blank=True, db_column='SUBTYPE', max_length=100)),
                ('business_sub_type_code', models.CharField(blank=True, db_column='SUBTYPE_CODE', max_length=3, null=True)),
            ],
            options={
                'db_table': 'business_subtypes',
            },
        ),
        migrations.CreateModel(
            name='BusinessTypes',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('business_type', models.CharField(blank=True, db_column='BUSINESS_TYPE', max_length=100)),
                ('business_type_code', models.CharField(blank=True, db_column='TYPE_CODE', max_length=4, null=True, unique=True)),
            ],
            options={
                'db_table': 'business_types',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='START_DATE', null=True)),
                ('end_date', models.DateTimeField(db_column='END_DATE', null=True)),
                ('tentative_cost', models.IntegerField(db_column='TENTATIVE_COST', null=True)),
                ('booking_status', models.CharField(blank=True, db_column='BOOKING_STATUS', max_length=20)),
                ('account', models.ForeignKey(db_column='BUSINESS_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='v0.AccountInfo')),
            ],
            options={
                'db_table': 'campaign',
            },
        ),
        migrations.CreateModel(
            name='CampaignAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_by', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'campaign_assignment',
            },
        ),
        migrations.CreateModel(
            name='CampaignComments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('comment', models.CharField(blank=True, max_length=500, null=True)),
                ('campaign_id', models.CharField(blank=True, db_index=True, max_length=70, null=True)),
                ('inventory_type', models.CharField(blank=True, choices=[('POSTER', 'Poster'), ('STANDEE', 'Standee'), ('STALL', 'Stall'), ('CAR DISPLAY', 'Car Display'), ('FLIER', 'Flier'), ('BANNER', 'Banner'), ('POSTER LIFT', 'Poster Lift'), ('GLASS_FACADE', 'GLASS_FACADE'), ('HOARDING', 'HOARDING'), ('DROPDOWN', 'DROPDOWN'), ('STANDEE', 'STANDEE'), ('PROMOTION_DESK', 'PROMOTION_DESK'), ('PILLAR', 'PILLAR'), ('TROLLEY', 'TROLLEY'), ('WALL_INVENTORY', 'WALL_INVENTORY'), ('FLOOR_INVENTORY', 'FLOOR_INVENTORY'), ('GATEWAY ARCH', 'GATEWAY ARCH'), ('SUNBOARD', 'SUNBOARD'), ('BANNER', 'BANNER')], db_column='inventory_type', max_length=20, null=True)),
                ('related_to', models.CharField(blank=True, choices=[('INTERNAL', 'INTERNAL'), ('EXTERNAL', 'EXTERNAL')], db_column='related_to', max_length=20, null=True)),
            ],
            options={
                'db_table': 'campaign_comments',
            },
        ),
        migrations.CreateModel(
            name='CampaignSocietyMapping',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('booking_status', models.CharField(blank=True, db_column='BOOKING_STATUS', max_length=20)),
                ('adjusted_price', models.IntegerField(db_column='ADJUSTED_PRICE', null=True)),
                ('comments', models.TextField(blank=True, db_column='COMMENTS', max_length=100)),
                ('campaign', models.ForeignKey(db_column='CAMPAIGN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='societies', to='v0.Campaign')),
            ],
            options={
                'db_table': 'campaign_society_mapping',
            },
        ),
        migrations.CreateModel(
            name='CampaignSupplierTypes',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('supplier_type', models.CharField(blank=True, db_column='SUPPLIER_TYPE', max_length=20)),
                ('count', models.IntegerField(db_column='COUNT', null=True)),
                ('campaign', models.ForeignKey(db_column='CAMPAIGN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supplier_types', to='v0.Campaign')),
            ],
            options={
                'db_table': 'campaign_supplier_types',
            },
        ),
        migrations.CreateModel(
            name='CampaignTypeMapping',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, db_column='TYPE', max_length=20)),
                ('sub_type', models.CharField(blank=True, db_column='SUB_TYPE', max_length=20)),
                ('campaign', models.ForeignKey(db_column='CAMPAIGN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='types', to='v0.Campaign')),
            ],
            options={
                'db_table': 'campaign_type_mapping',
            },
        ),
        migrations.CreateModel(
            name='CampaignTypes',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('type_name', models.CharField(blank=True, db_column='TYPE_NAME', max_length=20)),
            ],
            options={
                'db_table': 'campaign_types',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('city_name', models.CharField(db_column='CITY_NAME', max_length=100, null=True)),
                ('city_code', models.CharField(db_column='CITY_CODE', max_length=5, null=True)),
            ],
            options={
                'db_table': 'city',
            },
        ),
        migrations.CreateModel(
            name='CityArea',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('label', models.CharField(db_column='AREA_NAME', max_length=100, null=True)),
                ('area_code', models.CharField(db_column='AREA_CODE', max_length=5, null=True)),
                ('city_code', models.ForeignKey(db_column='CITY_CODE', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='citycode', to='v0.City')),
            ],
            options={
                'db_table': 'city_area',
            },
        ),
        migrations.CreateModel(
            name='CitySubArea',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('subarea_name', models.CharField(db_column='SUBAREA_NAME', max_length=100, null=True)),
                ('subarea_code', models.CharField(db_column='SUBAREA_CODE', max_length=5, null=True)),
                ('locality_rating', models.CharField(db_column='LOCALITY_RATING', max_length=100, null=True)),
                ('area_code', models.ForeignKey(db_column='AREA_CODE', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='areacode', to='v0.CityArea')),
            ],
            options={
                'db_table': 'city_area_subarea',
            },
        ),
        migrations.CreateModel(
            name='CommonAreaDetails',
            fields=[
                ('common_area_id', models.CharField(db_column='COMMON_AREA_ID', max_length=20, primary_key=True, serialize=False)),
                ('pole_count', models.IntegerField(blank=True, db_column='POLE_COUNT', null=True)),
                ('street_furniture_count', models.IntegerField(blank=True, db_column='STREET_FURNITURE_COUNT', null=True)),
                ('banner_count', models.IntegerField(blank=True, db_column='BANNER_COUNT', null=True)),
                ('common_area_stalls_count', models.IntegerField(blank=True, db_column='COMMON_AREA_STALLS_COUNT', null=True)),
                ('car_display', models.IntegerField(blank=True, db_column='CAR_DISPLAY', null=True)),
                ('wall_count', models.IntegerField(blank=True, db_column='WALL_COUNT', null=True)),
                ('major_event_count', models.IntegerField(blank=True, db_column='MAJOR_EVENT_COUNT', null=True)),
            ],
            options={
                'db_table': 'common_area_details',
            },
        ),
        migrations.CreateModel(
            name='CommunityHallInfo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('size_length', models.FloatField(blank=True, db_column='SIZE_LENGTH', default=0.0, null=True)),
                ('size_breadth', models.FloatField(blank=True, db_column='SIZE_BREADTH', default=0.0, null=True)),
                ('ceiling_height', models.FloatField(blank=True, db_column='CEILING_HEIGHT', default=0.0, null=True)),
                ('timings_open', models.TimeField(blank=True, db_column='TIMINGS_OPEN', null=True)),
                ('timings_close', models.TimeField(blank=True, db_column='TIMINGS_CLOSE', null=True)),
                ('rentals_current', models.FloatField(blank=True, db_column='RENTALS_CURRENT', default=0.0, null=True)),
                ('daily_price_society', models.FloatField(blank=True, db_column='DAILY_PRICE_SOCIETY', default=0.0, null=True)),
                ('daily_price_business', models.FloatField(blank=True, db_column='DAILY_PRICE_BUSINESS', default=0.0, null=True)),
                ('location', models.CharField(blank=True, db_column='LOCATION', max_length=50, null=True)),
                ('furniture_available', models.CharField(blank=True, db_column='FURNITURE_AVAILABLE', max_length=5, null=True)),
                ('chair_count', models.IntegerField(blank=True, db_column='CHAIR_COUNT', null=True)),
                ('tables_count', models.IntegerField(blank=True, db_column='TABLES_COUNT', null=True)),
                ('air_conditioned', models.CharField(blank=True, db_column='AIR_CONDITIONED', max_length=5, null=True)),
                ('projector_available', models.CharField(blank=True, db_column='PROJECTOR_AVAILABLE', max_length=15, null=True)),
                ('inventory_status', models.CharField(blank=True, db_column='INVENTORY_STATUS', max_length=15, null=True)),
                ('sitting', models.IntegerField(blank=True, db_column='SITTING', null=True)),
                ('audio_video_display_available', models.CharField(blank=True, db_column='AUDIO_VIDEO_DISPLAY_AVAILABLE', max_length=5, null=True)),
                ('electricity_charges_perhour', models.FloatField(blank=True, db_column='ELECTRICITY_CHARGES_PERHOUR', default=0.0, null=True)),
                ('notice_board_count_per_community_hall', models.IntegerField(blank=True, db_column='NOTICE_BOARD_COUNT_PER_COMMUNITY_HALL', null=True)),
                ('standee_location_count_per_community_hall', models.IntegerField(blank=True, db_column='STANDEE_LOCATION_COUNT_PER_COMMUNITY_HALL', null=True)),
                ('stall_count_per_community_hall', models.IntegerField(blank=True, db_column='STALL_COUNT_PER_COMMUNITY_HALL', null=True)),
                ('banner_count_per_community_hall', models.IntegerField(blank=True, db_column='BANNER_COUNT_PER_COMMUNITY_HALL', null=True)),
            ],
            options={
                'db_table': 'community_hall_info',
            },
        ),
        migrations.CreateModel(
            name='CompanyFloor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('floor_number', models.IntegerField(blank=True, db_column='FLOOR_NUMBER', null=True)),
            ],
            options={
                'db_table': 'corporate_building_floors',
            },
        ),
        migrations.CreateModel(
            name='ContactDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('contact_type', models.CharField(blank=True, max_length=30, null=True)),
                ('specify_others', models.CharField(blank=True, max_length=50, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('salutation', models.CharField(blank=True, max_length=50, null=True)),
                ('landline', models.CharField(blank=True, max_length=30, null=True)),
                ('std_code', models.CharField(blank=True, max_length=6, null=True)),
                ('mobile', models.BigIntegerField(blank=True, null=True)),
                ('country_code', models.CharField(blank=True, max_length=10, null=True)),
                ('email', models.CharField(blank=True, max_length=50, null=True)),
                ('spoc', models.CharField(blank=True, max_length=5, null=True)),
                ('contact_authority', models.CharField(blank=True, max_length=5, null=True)),
                ('designation', models.CharField(blank=True, max_length=155, null=True)),
                ('department', models.CharField(blank=True, max_length=155, null=True)),
                ('comments', models.TextField(blank=True, max_length=255, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('other_contact_type', models.CharField(blank=True, max_length=255, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'contact_details',
            },
        ),
        migrations.CreateModel(
            name='ContactDetailsGeneric',
            fields=[
                ('id', models.AutoField(db_column='CONTACT_ID', primary_key=True, serialize=False)),
                ('object_id', models.CharField(max_length=12)),
                ('contact_type', models.CharField(blank=True, db_column='CONTACT_TYPE', max_length=30, null=True)),
                ('name', models.CharField(blank=True, db_column='CONTACT_NAME', max_length=50, null=True)),
                ('salutation', models.CharField(blank=True, db_column='SALUTATION', max_length=50, null=True)),
                ('landline', models.BigIntegerField(blank=True, db_column='CONTACT_LANDLINE', null=True)),
                ('stdcode', models.CharField(blank=True, db_column='STD_CODE', max_length=6, null=True)),
                ('mobile', models.BigIntegerField(blank=True, db_column='CONTACT_MOBILE', null=True)),
                ('countrycode', models.CharField(blank=True, db_column='COUNTRY_CODE', max_length=10, null=True)),
                ('email', models.CharField(blank=True, db_column='CONTACT_EMAILID', max_length=50, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'contact_details_generic',
            },
        ),
        migrations.CreateModel(
            name='CorporateBuilding',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('building_name', models.CharField(blank=True, db_column='BUILDING_NAME', max_length=50, null=True)),
                ('number_of_wings', models.IntegerField(blank=True, db_column='NUMBER_OF_WINGS', null=True)),
            ],
            options={
                'db_table': 'corporate_building',
            },
        ),
        migrations.CreateModel(
            name='CorporateBuildingWing',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('wing_name', models.CharField(blank=True, db_column='WING_NAME', max_length=50, null=True)),
                ('number_of_floors', models.IntegerField(blank=True, db_column='NUMBER_OF_FLOORS', null=True)),
                ('building_id', models.ForeignKey(blank=True, db_column='BUILDING_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='buildingwing', to='v0.CorporateBuilding')),
            ],
            options={
                'db_table': 'corporate_building_wing',
            },
        ),
        migrations.CreateModel(
            name='CorporateCompanyDetails',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('building_name', models.CharField(blank=True, db_column='BUILDING_NAME', max_length=20, null=True)),
                ('wing_name', models.CharField(blank=True, db_column='WING_NAME', max_length=20, null=True)),
            ],
            options={
                'db_table': 'corporate_company_details',
            },
        ),
        migrations.CreateModel(
            name='CorporateParkCompanyList',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='COMPANY_NAME', max_length=50, null=True)),
                ('employeeCount', models.IntegerField(blank=True, db_column='EMPLOYEE_COUNT', null=True)),
            ],
            options={
                'db_table': 'corporateparkcompanylist',
            },
        ),
        migrations.CreateModel(
            name='CustomPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('extra_permission_code', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=1000, null=True)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'custom_permissions',
            },
        ),
        migrations.CreateModel(
            name='DataSciencesCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'data_sciences_cost',
            },
        ),
        migrations.CreateModel(
            name='DoorToDoorInfo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('flier_distribution_frequency_door', models.CharField(blank=True, db_column='FLIER_DISTRIBUTION_FREQUENCY_DOOR', max_length=20, null=True)),
                ('door_to_door_inventory_status', models.CharField(blank=True, db_column='DOOR_TO_DOOR_INVENTORY_STATUS', max_length=15, null=True)),
                ('door_to_door_price_society', models.FloatField(blank=True, db_column='DOOR_TO_DOOR_PRICE_SOCIETY', default=0.0, null=True)),
                ('door_to_door_price_business', models.FloatField(blank=True, db_column='DOOR_TO_DOOR_PRICE_BUSINESS', default=0.0, null=True)),
                ('master_door_to_door_flyer_price_society', models.FloatField(blank=True, db_column='MASTER_DOOR_TO_DOOR_FLYER_PRICE_SOCIETY', default=0.0, null=True)),
                ('master_door_to_door_flyer_price_business', models.FloatField(blank=True, db_column='MASTER_DOOR_TO_DOOR_FLYER_PRICE_BUSINESS', default=0.0, null=True)),
                ('leaflet_handover', models.CharField(blank=True, db_column='LEAFLET_HANDOVER', max_length=50, null=True)),
                ('activities', models.CharField(blank=True, db_column='ACTIVITIES', max_length=255, null=True)),
                ('banner_spaces_count', models.IntegerField(blank=True, db_column='BANNER_SPACES_COUNT', null=True)),
            ],
            options={
                'db_table': 'door_to_door_info',
            },
        ),
        migrations.CreateModel(
            name='DurationType',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('duration_name', models.CharField(db_column='DURATION_NAME', max_length=20)),
                ('days_count', models.CharField(db_column='DAYS_COUNT', max_length=10)),
            ],
            options={
                'db_table': 'duration_type',
            },
        ),
        migrations.CreateModel(
            name='EmailSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('email_type', models.CharField(choices=[('WEEKLY_LEADS', 'WEEKLY_LEADS'), ('WEEKLY_LEADS_GRAPH', 'WEEKLY_LEADS_GRAPH'), ('BOOKING_DETAILS_BASIC', 'BOOKING_DETAILS_BASIC'), ('BOOKING_DETAILS_ADV', 'BOOKING_DETAILS_ADV')], max_length=70, null=True)),
                ('is_allowed', models.BooleanField(default=False)),
                ('last_sent', models.DateTimeField(null=True)),
                ('user_type', models.CharField(choices=[('NORMAL', 'NORMAL'), ('ADMIN', 'ADMIN')], default='NORMAL', max_length=70, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_settings',
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('event_id', models.AutoField(db_column='EVENT_ID', primary_key=True, serialize=False)),
                ('event_name', models.CharField(blank=True, db_column='EVENT_NAME', max_length=255, null=True)),
                ('event_location', models.CharField(blank=True, db_column='EVENT_LOCATION', max_length=50, null=True)),
                ('past_gathering_per_event', models.IntegerField(blank=True, db_column='PAST_GATHERING_PER_EVENT', null=True)),
                ('start_day', models.CharField(blank=True, db_column='START_DAY', max_length=30, null=True)),
                ('end_day', models.CharField(blank=True, db_column='END_DAY', max_length=30, null=True)),
                ('important_day', models.CharField(blank=True, db_column='IMPORTANT_DAY', max_length=30, null=True)),
                ('activities', models.CharField(blank=True, db_column='ACTIVITIES', max_length=50, null=True)),
                ('stall_spaces_count', models.IntegerField(blank=True, db_column='STALL_SPACES_COUNT', null=True)),
                ('banner_spaces_count', models.IntegerField(blank=True, db_column='BANNER_SPACES_COUNT', null=True)),
                ('poster_spaces_count', models.IntegerField(blank=True, db_column='POSTER_SPACES_COUNT', null=True)),
                ('standee_spaces_count', models.IntegerField(blank=True, db_column='STANDEE_SPACES_COUNT', null=True)),
                ('event_status', models.CharField(blank=True, db_column='EVENT_STATUS', max_length=10, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('budget', models.IntegerField(blank=True, db_column='EVENT_BUDGET', null=True)),
                ('last_year_sponsors', models.CharField(blank=True, db_column='EVENT_LAST_YEAR_SPONSORS', max_length=255, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='EventStaffingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'event_staffing_cost',
            },
        ),
        migrations.CreateModel(
            name='Filters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('filter_name', models.CharField(blank=True, max_length=255, null=True)),
                ('filter_code', models.CharField(blank=True, max_length=255, null=True)),
                ('is_checked', models.BooleanField(default=False)),
                ('supplier_type_code', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'filters',
            },
        ),
        migrations.CreateModel(
            name='FlatType',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('flat_type', models.CharField(db_column='FLAT_TYPE', max_length=20)),
                ('flat_count', models.IntegerField(blank=True, db_column='FLAT_COUNT', null=True)),
                ('flat_type_count', models.IntegerField(blank=True, db_column='FLAT_TYPE_COUNT', null=True)),
                ('size_carpet_area', models.FloatField(blank=True, db_column='SIZE_CARPET_AREA', null=True)),
                ('size_builtup_area', models.FloatField(blank=True, db_column='SIZE_BUILTUP_AREA', null=True)),
                ('flat_rent', models.IntegerField(blank=True, db_column='FLAT_RENT', null=True)),
                ('average_rent_per_sqft', models.FloatField(blank=True, db_column='AVERAGE_RENT_PER_SQFT', null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'flat_type',
            },
        ),
        migrations.CreateModel(
            name='FlatTypeCode',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('flat_type_name', models.CharField(db_column='FLAT_TYPE_NAME', max_length=20, null=True)),
                ('flat_type_code', models.CharField(db_column='FLAT_TYPE_CODE', max_length=5, null=True)),
            ],
            options={
                'db_table': 'flat_type_code',
            },
        ),
        migrations.CreateModel(
            name='FlierThroughLobbyInfo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('flier_distribution_frequency_lobby', models.CharField(blank=True, db_column='FLIER_DISTRIBUTION_FREQUENCY_LOBBY', max_length=20, null=True)),
                ('flier_lobby_inventory_status', models.CharField(blank=True, db_column='FLIER_LOBBY_INVENTORY_STATUS', max_length=15, null=True)),
                ('flier_lobby_price_society', models.FloatField(blank=True, db_column='FLIER_LOBBY_PRICE_SOCIETY', default=0.0, null=True)),
                ('flier_lobby_price_business', models.FloatField(blank=True, db_column='FLIER_LOBBY_PRICE_BUSINESS', default=0.0, null=True)),
                ('master_flier_lobby_price_society', models.FloatField(blank=True, db_column='MASTER_FLIER_LOBBY_PRICE_SOCIETY', default=0.0, null=True)),
                ('master_flier_lobby_price_business', models.FloatField(blank=True, db_column='MASTER_FLIER_LOBBY_PRICE_BUSINESS', default=0.0, null=True)),
            ],
            options={
                'db_table': 'flier_through_lobby_info',
            },
        ),
        migrations.CreateModel(
            name='FlyerInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22, unique=True)),
                ('flat_count', models.IntegerField(blank=True, db_column='FLAT_COUNT', null=True)),
                ('mailbox_allowed', models.BooleanField(db_column='MAILBOX_ALLOWED', default=False)),
                ('d2d_allowed', models.BooleanField(db_column='D2D_ALLOWED', default=False)),
                ('lobbytolobby_allowed', models.BooleanField(db_column='LOBBYTOLOBBY_ALLOWED', default=False)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'flyer_inventory',
            },
        ),
        migrations.CreateModel(
            name='GatewayArchInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22, unique=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'gateway_arch_inventory',
            },
        ),
        migrations.CreateModel(
            name='GeneralUserPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_allowed', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'general_user_permission',
            },
        ),
        migrations.CreateModel(
            name='GenericExportFileName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('file_name', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_exported', models.BooleanField(default=True)),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.AccountInfo')),
                ('business', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.BusinessInfo')),
            ],
            options={
                'db_table': 'generic_export_file_name',
            },
        ),
        migrations.CreateModel(
            name='HashTagImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('object_id', models.CharField(db_index=True, max_length=100)),
                ('image_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('hashtag', models.CharField(max_length=255)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'hashtag_images',
            },
        ),
        migrations.CreateModel(
            name='IdeationDesignCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'ideation_design_cost',
            },
        ),
        migrations.CreateModel(
            name='ImageMapping',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('location_id', models.CharField(blank=True, db_column='LOCATION_ID', max_length=20, null=True)),
                ('location_type', models.CharField(blank=True, db_column='LOCATION_TYPE', max_length=20, null=True)),
                ('image_url', models.CharField(db_column='IMAGE_URL', max_length=100)),
                ('comments', models.CharField(blank=True, db_column='COMMENTS', max_length=100, null=True)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'image_mapping',
            },
        ),
        migrations.CreateModel(
            name='InventoryActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('activity_type', models.CharField(choices=[('RELEASE', 'RELEASE'), ('CLOSURE', 'CLOSURE'), ('AUDIT', 'AUDIT')], max_length=255, null=True)),
            ],
            options={
                'db_table': 'inventory_activity',
            },
        ),
        migrations.CreateModel(
            name='InventoryActivityAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('activity_date', models.DateTimeField(blank=True, max_length=255, null=True)),
                ('reassigned_activity_date', models.DateTimeField(blank=True, null=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_assigned_by', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity_assigned_to', to=settings.AUTH_USER_MODEL)),
                ('inventory_activity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.InventoryActivity')),
            ],
            options={
                'db_table': 'inventory_activity_assignment',
            },
        ),
        migrations.CreateModel(
            name='InventoryActivityImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('image_path', models.CharField(blank=True, max_length=1000, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
                ('actual_activity_date', models.DateTimeField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('activity_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('inventory_activity_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.InventoryActivityAssignment')),
            ],
            options={
                'db_table': 'inventory_activity_image',
            },
        ),
        migrations.CreateModel(
            name='InventoryInfo',
            fields=[
                ('inventory_type_id', models.CharField(db_column='INVENTORY_TYPE_ID', max_length=20, primary_key=True, serialize=False)),
                ('inventory_length', models.CharField(blank=True, db_column='INVENTORY_LENGTH', max_length=10, null=True)),
                ('inventory_breadth', models.CharField(blank=True, db_column='INVENTORY_BREADTH', max_length=10, null=True)),
                ('inventory_height', models.CharField(blank=True, db_column='INVENTORY_HEIGHT', max_length=10, null=True)),
                ('inventory_area', models.CharField(blank=True, db_column='INVENTORY_AREA', max_length=10, null=True)),
                ('inventory_size', models.CharField(blank=True, db_column='INVENTORY_SIZE', max_length=10, null=True)),
                ('inventory_name', models.CharField(blank=True, db_column='INVENTORY_NAME', max_length=70, null=True)),
                ('comments1', models.CharField(blank=True, db_column='COMMENTS1', max_length=500, null=True)),
                ('comments2', models.CharField(blank=True, db_column='COMMENTS2', max_length=500, null=True)),
                ('material_type', models.CharField(blank=True, db_column='MATERIAL_TYPE', max_length=70, null=True)),
            ],
            options={
                'db_table': 'inventory_info',
            },
        ),
        migrations.CreateModel(
            name='InventoryLocation',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('location_id', models.CharField(db_column='LOCATION_ID', max_length=20)),
                ('location_type', models.CharField(blank=True, db_column='LOCATION_TYPE', max_length=20, null=True)),
            ],
            options={
                'db_table': 'inventory_location',
            },
        ),
        migrations.CreateModel(
            name='InventorySummary',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('poster_allowed_nb', models.BooleanField(db_column='POSTER_ALLOWED_NB', default=False)),
                ('poster_allowed_lift', models.BooleanField(db_column='POSTER_ALLOWED_LIFT', default=False)),
                ('standee_allowed', models.BooleanField(db_column='STANDEE_ALLOWED', default=False)),
                ('stall_allowed', models.BooleanField(db_column='STALL_ALLOWED', default=False)),
                ('car_display_allowed', models.BooleanField(db_column='CAR_DISPLAY_ALLOWED', default=False)),
                ('flier_allowed', models.BooleanField(db_column='FLIER_ALLOWED', default=False)),
                ('nb_A4_allowed', models.BooleanField(db_column='NB_A4_ALLOWED', default=False)),
                ('nb_A3_allowed', models.BooleanField(db_column='NB_A3_ALLOWED', default=False)),
                ('poster_price_week_lift', models.IntegerField(db_column='POSTER_PRICE_WEEK_LIFT', null=True)),
                ('poster_price_week_nb', models.IntegerField(db_column='POSTER_PRICE_WEEK_NB', null=True)),
                ('standee_price_week', models.IntegerField(db_column='STANDEE_PRICE_WEEK', null=True)),
                ('stall_price_day_small', models.IntegerField(db_column='STALL_PRICE_DAY_SMALL', null=True)),
                ('stall_price_day_large', models.IntegerField(db_column='STALL_PRICE_DAY_LARGE', null=True)),
                ('cd_price_day_standard', models.IntegerField(db_column='CD_PRICE_DAY_STANDARD', null=True)),
                ('cd_price_day_premium', models.IntegerField(db_column='CD_PRICE_DAY_PREMIUM', null=True)),
                ('flier_price_day', models.IntegerField(db_column='FLIER_PRICE_DAY', null=True)),
                ('nb_count', models.IntegerField(db_column='NB_COUNT', null=True)),
                ('total_poster_nb', models.IntegerField(db_column='TOTAL_POSTERS_NB', null=True)),
                ('lift_count', models.IntegerField(db_column='LIFT_COUNT', null=True)),
                ('total_poster_count', models.IntegerField(db_column='TOTAL_POSTER_COUNT', null=True)),
                ('total_poster_campaigns', models.IntegerField(db_column='TOTAL_POSTER_CAMPAIGNS', null=True)),
                ('standee_small', models.BooleanField(db_column='STANDEE_SMALL', default=False)),
                ('standee_medium', models.BooleanField(db_column='STANDEE_MEDIUM', default=False)),
                ('total_standee_count', models.IntegerField(db_column='TOTAL_STANDEE_COUNT', null=True)),
                ('total_standee_campaigns', models.IntegerField(db_column='TOTAL_STANDEE_CAMPAIGNS', null=True)),
                ('stall_canopy', models.BooleanField(db_column='STALL_CANOPY', default=False)),
                ('stall_small', models.BooleanField(db_column='STALL_SMALL', default=False)),
                ('stall_large', models.BooleanField(db_column='STALL_LARGE', default=False)),
                ('cd_standard', models.BooleanField(db_column='CD_STANDARD', default=False)),
                ('cd_premium', models.BooleanField(db_column='CD_PREMIUM', default=False)),
                ('total_stall_count', models.IntegerField(db_column='TOTAL_STALL_COUNT', null=True)),
                ('timing', models.CharField(blank=True, db_column='STALL_TIMING', max_length=20, null=True)),
                ('furniture_available', models.BooleanField(db_column='FURNITURE_AVAILABLE', default=False)),
                ('electricity_available', models.BooleanField(db_column='ELECTRICITY_SEPARATE', default=False)),
                ('mailbox_allowed', models.BooleanField(db_column='MAILBOX_ALLOWED', default=False)),
                ('d2d_allowed', models.BooleanField(db_column='D2D_ALLOWED', default=False)),
                ('flier_frequency', models.IntegerField(db_column='FLIER_FREQUENCY', null=True)),
                ('flier_lobby_allowed', models.BooleanField(db_column='FLIER_LOBBY_ALLOWED', default=False)),
                ('poster_campaign', models.IntegerField(blank=True, db_column='POSTER_CAMPAIGN', null=True)),
                ('standee_campaign', models.IntegerField(blank=True, db_column='STANDEE_CAMPAIGN', null=True)),
                ('stall_or_cd_campaign', models.IntegerField(blank=True, db_column='STALL_OR_CD_CAMPAIGN', null=True)),
                ('flier_campaign', models.IntegerField(blank=True, db_column='FLIER_CAMPAIGN', null=True)),
                ('standee_per_campaign', models.IntegerField(db_column='STANDEE_PER_CAMPAIGN', null=True)),
                ('poster_per_campaign', models.IntegerField(db_column='POSTER_PER_CAMPAIGN', null=True)),
                ('campaign_count', models.IntegerField(db_column='CAMPAIGN_COUNT', null=True)),
                ('nb_price_confidence', models.CharField(blank=True, db_column='NB_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('lift_price_confidence', models.CharField(blank=True, db_column='LIFT_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('standee_price_confidence', models.CharField(blank=True, db_column='STANDEE_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('smallStall_price_confidence', models.CharField(blank=True, db_column='SMALLSTALL_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('largeStall_price_confidence', models.CharField(blank=True, db_column='LARGESTALL_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('standard_price_confidence', models.CharField(blank=True, db_column='STANDARD_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('premium_price_confidence', models.CharField(blank=True, db_column='PREMIUM_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('flier_price_confidence', models.CharField(blank=True, db_column='FLIER_PRICE_CONFIDENCE', max_length=20, null=True)),
                ('poster_count_per_tower', models.IntegerField(db_column='POSTER_COUNT_PER_TOWER', null=True)),
                ('poster_count_per_nb', models.IntegerField(db_column='POSTER_COUNT_PER_NB', null=True)),
                ('standee_count_per_tower', models.IntegerField(db_column='STANDEE_COUNT_PER_TOWER', null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('gateway_arch_allowed', models.BooleanField(default=False)),
                ('lit', models.BooleanField(default=False)),
                ('non_lit', models.BooleanField(default=False)),
                ('gateway_arch_length', models.FloatField(default=0.0, null=True)),
                ('gateway_arch_breadth', models.FloatField(default=0.0, null=True)),
                ('sun_board_allowed', models.BooleanField(default=False)),
                ('sun_board_length', models.FloatField(blank=True, null=True)),
                ('sun_board_breadth', models.FloatField(blank=True, null=True)),
                ('sun_board_height', models.FloatField(blank=True, null=True)),
                ('content_type', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'inventory_summary',
            },
        ),
        migrations.CreateModel(
            name='InventoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_code', models.CharField(db_index=True, max_length=4)),
                ('poster_allowed', models.BooleanField(default=False)),
                ('poster_type', models.CharField(blank=True, max_length=10, null=True)),
                ('standee_allowed', models.BooleanField(default=False)),
                ('standee_type', models.CharField(blank=True, max_length=10, null=True)),
                ('flier_allowed', models.BooleanField(default=False)),
                ('flier_type', models.CharField(blank=True, max_length=20, null=True)),
                ('stall_allowed', models.BooleanField(default=False)),
                ('stall_type', models.CharField(blank=True, max_length=10, null=True)),
                ('banner_allowed', models.BooleanField(default=False)),
                ('banner_type', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'inventory_type',
            },
        ),
        migrations.CreateModel(
            name='InventoryTypeVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_code', models.CharField(db_index=True, max_length=4)),
                ('poster_allowed', models.BooleanField(default=False)),
                ('poster_type', models.CharField(blank=True, max_length=10, null=True)),
                ('standee_allowed', models.BooleanField(default=False)),
                ('standee_type', models.CharField(blank=True, max_length=10, null=True)),
                ('flier_allowed', models.BooleanField(default=False)),
                ('flier_type', models.CharField(blank=True, max_length=20, null=True)),
                ('stall_allowed', models.BooleanField(default=False)),
                ('stall_type', models.CharField(blank=True, max_length=10, null=True)),
                ('banner_allowed', models.BooleanField(default=False)),
                ('banner_type', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'db_table': 'inventory_type_version',
            },
        ),
        migrations.CreateModel(
            name='LiftDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lift_tag', models.CharField(blank=True, db_column='LIFT_TAG', max_length=20, null=True)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('acrylic_board_available', models.CharField(blank=True, db_column='ACRYLIC_BOARD_AVAILABLE', max_length=5, null=True)),
                ('lift_location', models.CharField(blank=True, db_column='LIFT_LOCATION', max_length=100, null=True)),
                ('total_poster_per_lift', models.IntegerField(blank=True, db_column='TOTAL_POSTER_PER_LIFT', null=True)),
                ('lift_lit', models.CharField(blank=True, db_column='LIFT_LIT', max_length=5, null=True)),
                ('lift_bubble_wrapping_allowed', models.CharField(blank=True, db_column='LIFT_BUBBLE_WRAPPING_ALLOWED', max_length=5, null=True)),
                ('lift_advt_walls_count', models.IntegerField(blank=True, db_column='LIFT_ADVT_WALLS_COUNT', null=True)),
                ('photograph_1', models.CharField(blank=True, db_column='PHOTOGRAPH_1', max_length=45, null=True)),
                ('photograph_2', models.CharField(blank=True, db_column='PHOTOGRAPH_2', max_length=45, null=True)),
                ('inventory_status_lift', models.CharField(blank=True, db_column='INVENTORY_STATUS_LIFT', max_length=20, null=True)),
                ('inventory_size', models.CharField(blank=True, db_column='INVENTORY_SIZE', max_length=30, null=True)),
            ],
            options={
                'db_table': 'lift_details',
            },
        ),
        migrations.CreateModel(
            name='LogisticOperationsCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'logistic_operations_cost',
            },
        ),
        migrations.CreateModel(
            name='MailboxInfo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('tower_id', models.CharField(blank=True, db_column='TOWER_ID', max_length=20, null=True)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('flier_distribution_frequency', models.CharField(blank=True, db_column='FLIER_DISTRIBUTION_FREQUENCY', max_length=20, null=True)),
                ('mail_box_inventory_status', models.CharField(blank=True, db_column='MAIL_BOX_INVENTORY_STATUS', max_length=20, null=True)),
                ('mailbox_count_per_tower', models.IntegerField(blank=True, db_column='MAILBOX_COUNT_PER_TOWER', null=True)),
                ('mailbox_flyer_price_society', models.FloatField(blank=True, db_column='MAILBOX_FLYER_PRICE_SOCIETY', default=0.0, null=True)),
                ('mailbox_flyer_price_business', models.FloatField(blank=True, db_column='MAILBOX_FLYER_PRICE_BUSINESS', default=0.0, null=True)),
                ('photograph_1', models.CharField(blank=True, db_column='PHOTOGRAPH_1', max_length=45, null=True)),
                ('photograph_2', models.CharField(blank=True, db_column='PHOTOGRAPH_2', max_length=45, null=True)),
            ],
            options={
                'db_table': 'mailbox_info',
            },
        ),
        migrations.CreateModel(
            name='NoticeBoardDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('notice_board_tag', models.CharField(blank=True, db_column='NOTICE_BOARD_TAG', max_length=20, null=True)),
                ('notice_board_type', models.CharField(blank=True, db_column='NOTICE_BOARD_TYPE', max_length=50, null=True)),
                ('notice_board_type_other', models.CharField(blank=True, db_column='NOTICE_BOARD_TYPE_OTHER', max_length=30, null=True)),
                ('notice_board_location', models.CharField(blank=True, db_column='NOTICE_BOARD_LOCATION', max_length=100, null=True)),
                ('total_poster_per_notice_board', models.IntegerField(blank=True, db_column='TOTAL_POSTER_PER_NOTICE_BOARD', null=True)),
                ('poster_location_notice_board', models.CharField(blank=True, db_column='POSTER_LOCATION_NOTICE_BOARD', max_length=5, null=True)),
                ('notice_board_lit', models.CharField(blank=True, db_column='NOTICE_BOARD_LIT', max_length=5, null=True)),
                ('notice_board_size_length', models.FloatField(blank=True, db_column='NOTICE_BOARD_SIZE_LENGTH', default=0.0, null=True)),
                ('notice_board_size_breadth', models.FloatField(blank=True, db_column='NOTICE_BOARD_SIZE_BREADTH', default=0.0, null=True)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
            ],
            options={
                'db_table': 'notice_board_details',
            },
        ),
        migrations.CreateModel(
            name='ObjectLevelPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=50)),
                ('view', models.BooleanField(default=False)),
                ('update', models.BooleanField(default=False)),
                ('create', models.BooleanField(default=False)),
                ('delete', models.BooleanField(default=False)),
                ('view_all', models.BooleanField(default=False)),
                ('update_all', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'object_level_permission',
            },
        ),
        migrations.CreateModel(
            name='OperationsInfo',
            fields=[
                ('operator_id', models.CharField(db_column='OPERATOR_ID', max_length=10, primary_key=True, serialize=False)),
                ('operator_name', models.CharField(blank=True, db_column='OPERATOR_NAME', max_length=100, null=True)),
                ('operator_email', models.CharField(blank=True, db_column='OPERATOR_EMAIL', max_length=50, null=True)),
                ('operator_company', models.CharField(blank=True, db_column='OPERATOR_COMPANY', max_length=100, null=True)),
                ('operator_phone_number', models.IntegerField(blank=True, db_column='OPERATOR_PHONE_NUMBER', null=True)),
                ('comments_1', models.CharField(blank=True, db_column='COMMENTS_1', max_length=500, null=True)),
                ('comments_2', models.CharField(blank=True, db_column='COMMENTS_2', max_length=500, null=True)),
                ('company_id', models.CharField(blank=True, db_column='COMPANY_ID', max_length=50, null=True)),
                ('company_address', models.CharField(blank=True, db_column='COMPANY_ADDRESS', max_length=250, null=True)),
            ],
            options={
                'db_table': 'operations_info',
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('organisation_id', models.CharField(max_length=30, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(blank=True, max_length=12)),
                ('email', models.CharField(blank=True, max_length=50)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('reference_name', models.CharField(blank=True, max_length=50)),
                ('reference_phone', models.CharField(blank=True, max_length=10)),
                ('reference_email', models.CharField(blank=True, max_length=50)),
                ('comments', models.TextField(blank=True, max_length=100)),
                ('category', models.CharField(choices=[('MACHADALO', 'MACHADALO'), ('BUSINESS', 'BUSINESS'), ('BUSINESS_AGENCY', 'BUSINESS_AGENCY'), ('SUPPLIER_AGENCY', 'SUPPLIER_AGENCY'), ('SUPPLIER', 'SUPPLIER')], default='BUSINESS', max_length=30)),
                ('created_by_org', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('sub_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.BusinessSubTypes')),
                ('type_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.BusinessTypes')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organisation',
            },
        ),
        migrations.CreateModel(
            name='OrganisationMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('first_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='first_organisation', to='v0.Organisation')),
                ('second_organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='second_organisation', to='v0.Organisation')),
            ],
            options={
                'db_table': 'organisation_map',
            },
        ),
        migrations.CreateModel(
            name='OwnershipDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('gst_number', models.CharField(blank=True, max_length=255, null=True)),
                ('pan_number', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateTimeField(blank=True, max_length=50, null=True)),
                ('end_date', models.DateTimeField(blank=True, max_length=50, null=True)),
                ('payment_terms_condition', models.TextField(blank=True, max_length=255, null=True)),
                ('food_tasting', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=10, null=True)),
            ],
            options={
                'db_table': 'ownership_details',
            },
        ),
        migrations.CreateModel(
            name='PoleInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('inventory_type_id', models.CharField(blank=True, db_column='INVENTORY_TYPE_ID', max_length=20, null=True)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('pole_hoarding_size', models.CharField(blank=True, db_column='POLE_HOARDING_SIZE', max_length=10, null=True)),
                ('pole_area', models.CharField(blank=True, db_column='POLE_AREA', max_length=10, null=True)),
                ('pole_hoarding_type', models.CharField(blank=True, db_column='POLE_HOARDING_TYPE', max_length=20, null=True)),
                ('pole_lit_status', models.CharField(blank=True, db_column='POLE_LIT_STATUS', max_length=5)),
                ('pole_sides', models.CharField(blank=True, db_column='POLE_SIDES', max_length=10, null=True)),
                ('pole_monthly_price_society', models.FloatField(db_column='POLE_MONTHLY_PRICE_SOCIETY', null=True)),
                ('pole_quarterly_price_society', models.FloatField(db_column='POLE_QUARTERLY_PRICE_SOCIETY', null=True)),
                ('pole_monthly_price_business', models.FloatField(db_column='POLE_MONTHLY_PRICE_BUSINESS', null=True)),
                ('pole_quarterly_price_business', models.FloatField(db_column='POLE_QUARTERLY_PRICE_BUSINESS', null=True)),
                ('pole_location', models.CharField(blank=True, db_column='POLE_LOCATION', max_length=50, null=True)),
                ('pole_inventory_status', models.CharField(blank=True, db_column='POLE_INVENTORY_STATUS', max_length=20, null=True)),
            ],
            options={
                'db_table': 'pole_inventory',
            },
        ),
        migrations.CreateModel(
            name='PosterInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=25, primary_key=True, serialize=False)),
                ('tower_name', models.CharField(blank=True, db_column='TOWER_NAME', max_length=20, null=True)),
                ('poster_location', models.CharField(blank=True, db_column='POSTER_LOCATION', max_length=50, null=True)),
                ('poster_area', models.CharField(blank=True, db_column='POSTER_AREA', max_length=10, null=True)),
                ('inventory_status', models.CharField(blank=True, db_column='INVENTORY_STATUS', max_length=20, null=True)),
                ('poster_count_per_notice_board', models.IntegerField(blank=True, db_column='POSTER_COUNT_PER_NOTICE_BOARD', null=True)),
                ('inventory_type_id', models.CharField(blank=True, db_column='INVENTORY_TYPE_ID', max_length=255, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'poster_inventory',
            },
        ),
        migrations.CreateModel(
            name='PosterInventoryMapping',
            fields=[
                ('inventory_mapping_id', models.AutoField(db_column='INVENTORY_MAPPING_ID', primary_key=True, serialize=False)),
                ('inventory_type_id', models.CharField(blank=True, db_column='INVENTORY_TYPE_ID', max_length=20, null=True)),
                ('poster_adinventory_id', models.CharField(blank=True, db_column='POSTER_ADINVENTORY_ID', max_length=22, null=True)),
                ('standee_adinventory_id', models.CharField(blank=True, db_column='STANDEE_ADINVENTORY_ID', max_length=22, null=True)),
                ('banner_adinventory_id', models.CharField(blank=True, db_column='BANNER_ADINVENTORY_ID', max_length=22, null=True)),
                ('stall_adinventory_id', models.CharField(blank=True, db_column='STALL_ADINVENTORY_ID', max_length=22, null=True)),
            ],
            options={
                'db_table': 'poster_inventory_mapping',
            },
        ),
        migrations.CreateModel(
            name='PriceMapping',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('society_price', models.IntegerField(db_column='SUGGESTED_SOCIETY_PRICE')),
                ('business_price', models.IntegerField(db_column='ACTUAL_SOCIETY_PRICE')),
                ('adinventory_id', models.ForeignKey(blank=True, db_column='ADINVENTORY_LOCATION_MAPPING_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='v0.AdInventoryLocationMapping')),
                ('adinventory_type', models.ForeignKey(blank=True, db_column='ADINVENTORY_TYPE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.AdInventoryType')),
                ('duration_type', models.ForeignKey(blank=True, db_column='DURATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.DurationType')),
            ],
            options={
                'db_table': 'price_mapping',
            },
        ),
        migrations.CreateModel(
            name='PriceMappingDefault',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('suggested_supplier_price', models.IntegerField(blank=True, db_column='SUGGESTED_SOCIETY_PRICE', null=True)),
                ('actual_supplier_price', models.IntegerField(blank=True, db_column='ACTUAL_SOCIETY_PRICE', null=True)),
                ('object_id', models.CharField(db_index=True, max_length=20, null=True)),
                ('adinventory_type', models.ForeignKey(blank=True, db_column='ADINVENTORY_TYPE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.AdInventoryType')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('duration_type', models.ForeignKey(blank=True, db_column='DURATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.DurationType')),
            ],
            options={
                'db_table': 'price_mapping_default',
            },
        ),
        migrations.CreateModel(
            name='PrintingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'db_table': 'printing_cost',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('name', models.CharField(max_length=255)),
                ('is_standard', models.BooleanField(default=False)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='ProposalCenterMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('center_name', models.CharField(max_length=50)),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('latitude', models.FloatField(default=0.0)),
                ('longitude', models.FloatField(default=0.0)),
                ('radius', models.FloatField(default=0.0)),
                ('subarea', models.CharField(max_length=35)),
                ('area', models.CharField(max_length=35)),
                ('city', models.CharField(max_length=35)),
                ('pincode', models.IntegerField()),
            ],
            options={
                'db_table': 'proposal_center_mapping',
            },
        ),
        migrations.CreateModel(
            name='ProposalCenterMappingVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('center_name', models.CharField(max_length=50)),
                ('address', models.CharField(blank=True, max_length=150, null=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('radius', models.FloatField()),
                ('subarea', models.CharField(default='', max_length=35)),
                ('area', models.CharField(default='', max_length=35)),
                ('city', models.CharField(default='', max_length=35)),
                ('pincode', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'proposal_center_mapping_version',
            },
        ),
        migrations.CreateModel(
            name='ProposalCenterSuppliers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_type_code', models.CharField(blank=True, max_length=255, null=True)),
                ('center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalCenterMapping')),
            ],
            options={
                'db_table': 'proposal_center_suppliers',
            },
        ),
        migrations.CreateModel(
            name='ProposalInfo',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('proposal_id', models.CharField(db_index=True, max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_status', models.BooleanField(default=False)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(max_length=50)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.CharField(max_length=50)),
                ('tentative_cost', models.IntegerField(default=5000)),
                ('tentative_start_date', models.DateTimeField(null=True)),
                ('tentative_end_date', models.DateTimeField(null=True)),
                ('campaign_state', models.CharField(blank=True, max_length=10, null=True)),
                ('is_disabled', models.BooleanField(default=False)),
                ('invoice_number', models.CharField(blank=True, max_length=1000, null=True)),
                ('account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proposals', to='v0.AccountInfo')),
                ('parent', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo')),
                ('principal_vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'proposal_info',
            },
        ),
        migrations.CreateModel(
            name='ProposalInfoVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50)),
                ('payment_status', models.BooleanField(db_column='PAYMENT STATUS', default=False)),
                ('created_on', models.DateTimeField()),
                ('created_by', models.CharField(default='Admin', max_length=50)),
                ('tentative_cost', models.IntegerField(default=5000)),
                ('tentative_start_date', models.DateTimeField(null=True)),
                ('tentative_end_date', models.DateTimeField(null=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('proposal', models.ForeignKey(db_column='PROPOSAL', on_delete=django.db.models.deletion.CASCADE, related_name='proposal_versions', to='v0.ProposalInfo')),
            ],
            options={
                'db_table': 'proposal_info_version',
            },
        ),
        migrations.CreateModel(
            name='ProposalMasterCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('agency_cost', models.FloatField(blank=True, null=True)),
                ('basic_cost', models.FloatField(blank=True, null=True)),
                ('discount', models.FloatField(blank=True, null=True)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('tax', models.FloatField(blank=True, null=True)),
                ('total_impressions', models.FloatField(blank=True, null=True)),
                ('average_cost_per_impression', models.FloatField(blank=True, null=True)),
                ('proposal', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'proposal_master_cost_details',
            },
        ),
        migrations.CreateModel(
            name='ProposalMetrics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('metric_name', models.CharField(blank=True, max_length=255, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
                ('proposal_master_cost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost')),
                ('supplier_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'proposal_metrics',
            },
        ),
        migrations.CreateModel(
            name='RatioDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_id', models.CharField(db_column='SUPPLIER_ID', max_length=20)),
                ('machadalo_index', models.CharField(db_column='MACHADALO_INDEX', max_length=30)),
                ('age_proportions', models.CharField(blank=True, db_column='AGE_PROPORTIONS', max_length=15, null=True)),
                ('flat_avg_rental_persqft', models.CharField(blank=True, db_column='FLAT_AVG_RENTAL_PERSQFT', max_length=10, null=True)),
                ('flat_avg_size', models.CharField(blank=True, db_column='FLAT_AVG_SIZE', max_length=5, null=True)),
                ('flat_sale_cost_persqft', models.CharField(blank=True, db_column='FLAT_SALE_COST_PERSQFT', max_length=5, null=True)),
                ('wall_count', models.IntegerField(blank=True, db_column='WALL_COUNT', null=True)),
                ('major_event_count', models.IntegerField(blank=True, db_column='MAJOR_EVENT_COUNT', null=True)),
            ],
            options={
                'db_table': 'ratio_details',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=255)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='RoleHierarchy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.IntegerField(default=0)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Role')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent', to='v0.Role')),
            ],
            options={
                'db_table': 'role_hierarchy',
            },
        ),
        migrations.CreateModel(
            name='ShortlistedInventoryPricingDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('inventory_id', models.CharField(blank=True, max_length=255, null=True)),
                ('inventory_price', models.FloatField(default=0.0, null=True)),
                ('inventory_count', models.IntegerField(default=0, null=True)),
                ('factor', models.IntegerField(default=0.0, null=True)),
                ('release_date', models.DateTimeField(blank=True, null=True)),
                ('closure_date', models.DateTimeField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
                ('inventory_number_of_days', models.IntegerField(null=True)),
                ('ad_inventory_duration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.DurationType')),
                ('ad_inventory_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.AdInventoryType')),
                ('inventory_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'shortlisted_inventory_pricing_details',
            },
        ),
        migrations.CreateModel(
            name='ShortlistedSpaces',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_code', models.CharField(blank=True, max_length=4, null=True)),
                ('object_id', models.CharField(db_index=True, max_length=20)),
                ('buffer_status', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, max_length=10, null=True)),
                ('campaign_status', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('phase', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('payment_status', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_method', models.CharField(blank=True, max_length=255, null=True)),
                ('total_negotiated_price', models.CharField(blank=True, max_length=255, null=True)),
                ('booking_status', models.CharField(blank=True, max_length=10, null=True)),
                ('booking_sub_status', models.CharField(blank=True, max_length=15, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('transaction_or_check_number', models.CharField(blank=True, max_length=50, null=True)),
                ('freebies', models.CharField(blank=True, max_length=255, null=True)),
                ('stall_locations', models.CharField(blank=True, max_length=255, null=True)),
                ('cost_per_flat', models.FloatField(blank=True, null=True)),
                ('booking_priority', models.CharField(blank=True, max_length=10, null=True)),
                ('sunboard_location', models.CharField(blank=True, max_length=50, null=True)),
                ('next_action_date', models.DateTimeField(null=True)),
                ('center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalCenterMapping')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spaces', to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'shortlisted_spaces',
            },
        ),
        migrations.CreateModel(
            name='ShortlistedSpacesVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supplier_code', models.CharField(max_length=4)),
                ('object_id', models.CharField(max_length=12)),
                ('buffer_status', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spaces_version', to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'shortlisted_spaces_version',
            },
        ),
        migrations.CreateModel(
            name='Signup',
            fields=[
                ('user_id', models.AutoField(db_column='USER_ID', primary_key=True, serialize=False)),
                ('first_name', models.TextField(blank=True, db_column='FIRST_NAME', null=True)),
                ('email', models.TextField(blank=True, db_column='EMAIL', null=True)),
                ('password', models.TextField(blank=True, db_column='PASSWORD', null=True)),
                ('login_type', models.TextField(blank=True, db_column='LOGIN_TYPE', null=True)),
                ('system_generated_id', models.BigIntegerField(db_column='SYSTEM_GENERATED_ID')),
                ('adminstrator_approved', models.CharField(blank=True, db_column='ADMINSTRATOR_APPROVED', max_length=255, null=True)),
                ('company_name', models.CharField(blank=True, db_column='COMPANY_NAME', max_length=255, null=True)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=255, null=True)),
                ('mobile_no', models.CharField(blank=True, db_column='MOBILE_NO', max_length=255, null=True)),
                ('signup_status', models.CharField(blank=True, db_column='SIGNUP_STATUS', max_length=255, null=True)),
            ],
            options={
                'db_table': 'signup',
            },
        ),
        migrations.CreateModel(
            name='SocietyFlat',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('flat_tag', models.CharField(blank=True, db_column='FLAT_TAG', max_length=20, null=True)),
                ('flat_type', models.CharField(db_column='FLAT_TYPE', max_length=20)),
                ('flat_count', models.IntegerField(blank=True, db_column='FLAT_COUNT', null=True)),
            ],
            options={
                'db_table': 'society_flat',
            },
        ),
        migrations.CreateModel(
            name='SocietyInventoryBooking',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('ad_location', models.CharField(blank=True, db_column='AD_LOCATION', max_length=50)),
                ('start_date', models.DateField(db_column='START_DATE', null=True)),
                ('end_date', models.DateField(db_column='END_DATE', null=True)),
                ('audit_date', models.DateField(db_column='AUDIT_DATE', null=True)),
                ('object_id', models.CharField(max_length=12, null=True)),
                ('adinventory_type', models.ForeignKey(db_column='ADINVENTORY_TYPE', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.CampaignTypeMapping')),
                ('campaign', models.ForeignKey(db_column='CAMPAIGN_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_bookings', to='v0.Campaign')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'society_inventory_booking',
            },
        ),
        migrations.CreateModel(
            name='SocietyMajorEvents',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('Ganpati', models.BooleanField(db_column='Ganpati', default=False)),
                ('Diwali', models.BooleanField(db_column='Diwali', default=False)),
                ('Lohri', models.BooleanField(db_column='Lohri', default=False)),
                ('Navratri', models.BooleanField(db_column='Navratri', default=False)),
                ('Holi', models.BooleanField(db_column='Holi', default=False)),
                ('Janmashtami', models.BooleanField(db_column='Janmashtami', default=False)),
                ('IndependenceDay', models.BooleanField(db_column='IndependenceDay', default=False)),
                ('RepublicDay', models.BooleanField(db_column='RepublicDay', default=False)),
                ('SportsDay', models.BooleanField(db_column='SportsDay', default=False)),
                ('AnnualDay', models.BooleanField(db_column='AnnualDay', default=False)),
                ('Christmas', models.BooleanField(db_column='Christmas', default=False)),
                ('NewYear', models.BooleanField(db_column='NewYear', default=False)),
                ('past_major_events', models.IntegerField(blank=True, db_column='PAST_MAJOR_EVENTS', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SocietyTower',
            fields=[
                ('tower_id', models.AutoField(db_column='TOWER_ID', primary_key=True, serialize=False)),
                ('tower_tag', models.CharField(blank=True, db_column='TOWER_TAG', max_length=20, null=True)),
                ('tower_name', models.CharField(blank=True, db_column='TOWER_NAME', max_length=20, null=True)),
                ('flat_count_per_tower', models.IntegerField(blank=True, db_column='FLAT_COUNT_PER_TOWER', null=True)),
                ('floor_count_per_tower', models.IntegerField(blank=True, db_column='FLOOR_COUNT_PER_TOWER', null=True)),
                ('notice_board_count_per_tower', models.IntegerField(db_column='NOTICE_BOARD_COUNT_PER_TOWER', default=0)),
                ('standee_location_count_per_tower', models.IntegerField(blank=True, db_column='STANDEE_LOCATION_COUNT_PER_TOWER', null=True)),
                ('mailbox_count_per_tower', models.IntegerField(blank=True, db_column='MAILBOX_COUNT_PER_TOWER', null=True)),
                ('stall_count_per_tower', models.IntegerField(blank=True, db_column='STALL_COUNT_PER_TOWER', null=True)),
                ('tower_location', models.CharField(blank=True, db_column='TOWER_LOCATION', max_length=100, null=True)),
                ('tower_resident_count', models.IntegerField(blank=True, db_column='TOWER_RESIDENT_COUNT', null=True)),
                ('lift_count', models.IntegerField(db_column='LIFT_COUNT', default=0)),
                ('flat_type_count', models.IntegerField(db_column='FLAT_TYPE_COUNT', default=0)),
                ('standee_count', models.IntegerField(db_column='STANDEE_COUNT', default=0)),
                ('average_rent_per_sqft', models.IntegerField(blank=True, db_column='AVERAGE_RENT_PER_SQFT', null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'society_tower',
            },
        ),
        migrations.CreateModel(
            name='SpaceBookingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('total_cost', models.FloatField(blank=True, null=True)),
                ('comment', models.CharField(blank=True, max_length=1000, null=True)),
                ('proposal_master_cost', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost')),
                ('supplier_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'space_booking_cost',
            },
        ),
        migrations.CreateModel(
            name='SpaceMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('society_allowed', models.BooleanField(default=False)),
                ('society_count', models.IntegerField(default=0)),
                ('society_buffer_count', models.IntegerField(default=0)),
                ('corporate_allowed', models.BooleanField(default=False)),
                ('corporate_count', models.IntegerField(default=0)),
                ('corporate_buffer_count', models.IntegerField(default=0)),
                ('gym_allowed', models.BooleanField(default=False)),
                ('gym_count', models.IntegerField(default=0)),
                ('gym_buffer_count', models.IntegerField(default=0)),
                ('salon_allowed', models.BooleanField(default=False)),
                ('salon_count', models.IntegerField(default=0)),
                ('salon_buffer_count', models.IntegerField(default=0)),
                ('center', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='space_mappings', to='v0.ProposalCenterMapping')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_mapping', to='v0.ProposalInfo')),
            ],
            options={
                'db_table': 'space_mapping',
            },
        ),
        migrations.CreateModel(
            name='SpaceMappingVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('society_allowed', models.BooleanField(default=False)),
                ('society_count', models.IntegerField(default=0)),
                ('society_buffer_count', models.IntegerField(default=0)),
                ('corporate_allowed', models.BooleanField(default=False)),
                ('corporate_count', models.IntegerField(default=0)),
                ('corporate_buffer_count', models.IntegerField(default=0)),
                ('gym_allowed', models.BooleanField(default=False)),
                ('gym_count', models.IntegerField(default=0)),
                ('gym_buffer_count', models.IntegerField(default=0)),
                ('salon_allowed', models.BooleanField(default=False)),
                ('salon_count', models.IntegerField(default=0)),
                ('salon_buffer_count', models.IntegerField(default=0)),
                ('center_version', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='space_mappings_version', to='v0.ProposalCenterMappingVersion')),
                ('proposal_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_mapping_version', to='v0.ProposalInfoVersion')),
            ],
            options={
                'db_table': 'space_mapping_version',
            },
        ),
        migrations.CreateModel(
            name='SportsInfra',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('sports_infrastructure_id', models.CharField(blank=True, db_column='SPORTS_INFRASTRUCTURE_ID', max_length=20, null=True)),
                ('stall_spaces_count', models.IntegerField(blank=True, db_column='STALL_SPACES_COUNT', null=True)),
                ('banner_spaces_count', models.IntegerField(blank=True, db_column='BANNER_SPACES_COUNT', null=True)),
                ('poster_spaces_count', models.IntegerField(blank=True, db_column='POSTER_SPACES_COUNT', null=True)),
                ('standee_spaces_count', models.IntegerField(blank=True, db_column='STANDEE_SPACES_COUNT', null=True)),
                ('sponsorship_amount_society', models.IntegerField(blank=True, db_column='SPONSORSHIP_AMOUNT_SOCIETY', null=True)),
                ('sponsorship_amount_business', models.IntegerField(blank=True, db_column='SPONSORSHIP_AMOUNT_BUSINESS)', null=True)),
                ('start_date', models.DateField(blank=True, db_column='START_DATE', null=True)),
                ('end_date', models.DateField(blank=True, db_column='END_DATE', null=True)),
                ('outside_participants_allowed', models.CharField(blank=True, db_column='OUTSIDE_PARTICIPANTS_ALLOWED', max_length=5, null=True)),
                ('lit_unlit', models.CharField(blank=True, db_column='LIT_UNLIT', max_length=5, null=True)),
                ('daily_infra_charges_society', models.IntegerField(blank=True, db_column='DAILY_INFRA_CHARGES_SOCIETY', null=True)),
                ('daily_infra_charges_business', models.IntegerField(blank=True, db_column='DAILY_INFRA_CHARGES_BUSINESS', null=True)),
                ('play_areas_count', models.IntegerField(blank=True, db_column='PLAY_AREAS_COUNT', null=True)),
                ('play_area_size', models.IntegerField(blank=True, db_column='PLAY_AREA_SIZE', null=True)),
                ('sports_type', models.CharField(blank=True, db_column='SPORTS_TYPE', max_length=20, null=True)),
            ],
            options={
                'db_table': 'sports_infra',
            },
        ),
        migrations.CreateModel(
            name='StallInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22)),
                ('stall_small', models.BooleanField(db_column='STALL_SMALL', default=False)),
                ('stall_canopy', models.BooleanField(db_column='STALL_CANOPY', default=False)),
                ('stall_medium', models.BooleanField(db_column='STALL_MEDIUM', default=False)),
                ('car_standard', models.BooleanField(db_column='CAR_STANDARD', default=False)),
                ('car_premium', models.BooleanField(db_column='CAR_PREMIUM', default=False)),
                ('stall_morning', models.BooleanField(db_column='STALL_MORNING', default=False)),
                ('stall_evening', models.BooleanField(db_column='STALL_EVENING', default=False)),
                ('stall_time_both', models.BooleanField(db_column='STALL_TIME_BOTH', default=False)),
                ('stall_weekdays', models.BooleanField(db_column='STALL_WEEKDAYS', default=False)),
                ('stall_location', models.CharField(blank=True, db_column='STALL_LOCATION', max_length=50, null=True)),
                ('electricity_available', models.BooleanField(db_column='ELECTRICITY_AVAILABLE_STALLS', default=False)),
                ('electricity_charges_daily', models.FloatField(blank=True, db_column='ELECTRICITY_CHARGES_DAILY', max_length=50, null=True)),
                ('sound_system_allowed', models.BooleanField(db_column='SOUND_SYSTEM_ALLOWED', default=False)),
                ('furniture_available', models.BooleanField(db_column='STALL_FURNITURE_AVAILABLE', default=False)),
                ('furniture_details', models.CharField(blank=True, db_column='STALL_FURNITURE_DETAILS', max_length=50, null=True)),
                ('stall_size', models.CharField(blank=True, db_column='STALL_SIZE', max_length=20, null=True)),
                ('stall_timing', models.CharField(blank=True, db_column='STALL_TIMINGS', max_length=20, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'stall_inventory',
            },
        ),
        migrations.CreateModel(
            name='StandeeInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('inventory_type_id', models.CharField(blank=True, db_column='INVENTORY_TYPE_ID', max_length=20, null=True)),
                ('inventory_status', models.CharField(blank=True, db_column='INVENTORY_STATUS', max_length=15, null=True)),
                ('standee_location', models.CharField(blank=True, db_column='STANDEE_LOCATION', max_length=50, null=True)),
                ('type', models.CharField(blank=True, db_column='STANDEE_TYPE', max_length=10, null=True)),
                ('standee_size', models.CharField(blank=True, db_column='STANDEE_SIZE', max_length=10, null=True)),
                ('standee_sides', models.CharField(blank=True, db_column='STANDEE_SIDES', max_length=10, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('tower', models.ForeignKey(blank=True, db_column='TOWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='standees', to='v0.SocietyTower')),
            ],
            options={
                'db_table': 'standee_inventory',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('state_name', models.CharField(db_column='STATE_NAME', max_length=50, null=True)),
                ('state_code', models.CharField(db_column='STATE_CODE', max_length=5, null=True)),
            ],
            options={
                'db_table': 'state',
            },
        ),
        migrations.CreateModel(
            name='StreetFurniture',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(blank=True, db_column='ADINVENTORY_ID', max_length=22, null=True)),
                ('no_of_furniture', models.IntegerField(blank=True, db_column='NO_OF_FURNITURE', null=True)),
                ('type_of_furniture', models.CharField(blank=True, db_column='TYPE_OF_FURNITURE', max_length=20, null=True)),
                ('photograph_1', models.CharField(blank=True, db_column='PHOTOGRAPH_1', max_length=45, null=True)),
                ('photograph_2', models.CharField(blank=True, db_column='PHOTOGRAPH_2', max_length=45, null=True)),
                ('comment_1', models.TextField(blank=True, db_column='COMMENT_1', null=True)),
                ('comment_2', models.TextField(blank=True, db_column='COMMENT_2', null=True)),
                ('furniture_status', models.CharField(blank=True, db_column='FURNITURE_STATUS', max_length=10, null=True)),
            ],
            options={
                'db_table': 'street_furniture',
            },
        ),
        migrations.CreateModel(
            name='SunBoardInventory',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22, unique=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'sun_board_inventory',
            },
        ),
        migrations.CreateModel(
            name='SupplierAmenitiesMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('object_id', models.CharField(max_length=1000)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('amenity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Amenity')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'supplier_amenities_map',
            },
        ),
        migrations.CreateModel(
            name='SupplierAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20)),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_by_user', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_to_user', to=settings.AUTH_USER_MODEL)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo')),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'db_table': 'supplier_assignment',
            },
        ),
        migrations.CreateModel(
            name='SupplierEducationalInstitute',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_educational_institute',
            },
        ),
        migrations.CreateModel(
            name='SupplierHording',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_hording',
            },
        ),
        migrations.CreateModel(
            name='SupplierInfo',
            fields=[
                ('supplier_id', models.CharField(db_column='SUPPLIER_ID', db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_name', models.CharField(blank=True, db_column='SUPPLIER_NAME', max_length=30, null=True)),
                ('supplier_emailid', models.CharField(blank=True, db_column='SUPPLIER_EMAILID', max_length=100, null=True)),
                ('supplier_phone_no', models.CharField(blank=True, db_column='SUPPLIER_PHONE_NO', max_length=15, null=True)),
                ('supplier_location', models.CharField(blank=True, db_column='SUPPLIER_LOCATION', max_length=70, null=True)),
                ('supplier_business_type', models.CharField(blank=True, db_column='SUPPLIER_BUSINESS_TYPE', max_length=30, null=True)),
                ('comments_1', models.CharField(blank=True, db_column='COMMENTS_1', max_length=500, null=True)),
                ('comments_2', models.CharField(blank=True, db_column='COMMENTS_2', max_length=500, null=True)),
                ('supplier_address', models.CharField(blank=True, db_column='SUPPLIER_ADDRESS', max_length=250, null=True)),
                ('total_inventory', models.CharField(blank=True, db_column='TOTAL_INVENTORY', max_length=5, null=True)),
                ('total_inventory_currently_released', models.CharField(blank=True, db_column='TOTAL_INVENTORY_CURRENTLY_RELEASED', max_length=5, null=True)),
                ('total_inventory_currently_released_audit', models.CharField(blank=True, db_column='TOTAL_INVENTORY_CURRENTLY_RELEASED_AUDIT', max_length=5, null=True)),
                ('pan_id', models.CharField(blank=True, db_column='PAN_ID', max_length=10, null=True)),
                ('tan_id', models.CharField(blank=True, db_column='TAN_ID', max_length=12, null=True)),
                ('supplier_type', models.CharField(blank=True, db_column='SUPPLIER_TYPE', max_length=20, null=True)),
                ('mapping_date', models.DateField(blank=True, db_column='MAPPING_DATE', null=True)),
                ('agreement_term_start', models.DateField(blank=True, db_column='AGREEMENT_TERM_START', null=True)),
                ('agreement_term_end', models.DateField(blank=True, db_column='AGREEMENT_TERM_END', null=True)),
                ('current_status', models.DateField(blank=True, db_column='CURRENT_STATUS', null=True)),
            ],
            options={
                'db_table': 'supplier_info',
            },
        ),
        migrations.CreateModel(
            name='SupplierPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('phase_no', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('start_date', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo')),
            ],
            options={
                'db_table': 'supplier_phase',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeBusDepot',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('bus_count', models.IntegerField(blank=True, null=True)),
                ('route_count_originate', models.IntegerField(blank=True, null=True)),
                ('route_count_terminate', models.IntegerField(blank=True, null=True)),
                ('bus_types', models.CharField(blank=True, max_length=20, null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_type_bus_depot',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeBusShelter',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('lit_status', models.CharField(blank=True, max_length=255, null=True)),
                ('halt_buses_count', models.IntegerField(blank=True, null=True)),
                ('direction', models.CharField(blank=True, max_length=255, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('average_peak_hour_traffic', models.CharField(blank=True, max_length=255, null=True)),
                ('average_non_peak_hour_traffic', models.CharField(blank=True, max_length=255, null=True)),
                ('average_footfall_daily_count', models.IntegerField(blank=True, null=True)),
                ('average_down_boarding_daily_count', models.IntegerField(blank=True, null=True)),
                ('average_on_boarding_daily_count', models.IntegerField(blank=True, null=True)),
                ('external_number', models.CharField(blank=True, max_length=255, null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_bus_shelter',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeCode',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('supplier_type_name', models.CharField(db_column='SUPPLIER_TYPE_NAME', max_length=30, null=True)),
                ('supplier_type_code', models.CharField(db_column='SUPPLIER_TYPE_CODE', max_length=5, null=True)),
            ],
            options={
                'db_table': 'supplier_type_code',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeCorporate',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('corporate_type', models.CharField(blank=True, max_length=25, null=True)),
                ('industry_segment', models.CharField(blank=True, max_length=30, null=True)),
                ('possession_year', models.CharField(blank=True, max_length=5, null=True)),
                ('building_count', models.IntegerField(blank=True, null=True)),
                ('floorperbuilding_count', models.IntegerField(blank=True, null=True)),
                ('totalcompanies_count', models.IntegerField(blank=True, null=True)),
                ('totalemployees_count', models.IntegerField(blank=True, null=True)),
                ('isrealestateallowed', models.BooleanField(default=False)),
                ('total_area', models.FloatField(blank=True, default=0.0, null=True)),
                ('quantity_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('luxurycars_count', models.IntegerField(blank=True, null=True)),
                ('standardcars_count', models.IntegerField(blank=True, null=True)),
                ('totallift_count', models.IntegerField(blank=True, null=True)),
                ('parkingspaces_count', models.IntegerField(blank=True, null=True)),
                ('entryexit_count', models.IntegerField(blank=True, null=True)),
                ('openspaces_count', models.IntegerField(blank=True, null=True)),
                ('constructionspaces_count', models.IntegerField(blank=True, null=True)),
                ('constructedspace', models.FloatField(blank=True, default=0.0, null=True)),
                ('parkingspace', models.FloatField(blank=True, default=0.0, null=True)),
                ('openspace', models.FloatField(blank=True, default=0.0, null=True)),
                ('averagerent', models.FloatField(blank=True, default=0.0, null=True)),
                ('is_common_cafeteria_available', models.BooleanField(default=False)),
                ('name_for_payment', models.CharField(blank=True, db_column='NAME_FOR_PAYMENT', max_length=100, null=True)),
                ('tower_count', models.IntegerField(blank=True, db_column='TOWER_COUNT', null=True)),
                ('poster_allowed_nb', models.BooleanField(db_column='POSTER_ALLOWED_NB', default=False)),
                ('poster_allowed_lift', models.BooleanField(db_column='POSTER_ALLOWED_LIFT', default=False)),
                ('standee_allowed', models.BooleanField(db_column='STANDEE_ALLOWED', default=False)),
                ('stall_allowed', models.BooleanField(db_column='STALL_ALLOWED', default=False)),
                ('banner_allowed', models.BooleanField(db_column='BANNER_ALLOWED', default=False)),
                ('supplier_status', models.CharField(choices=[('Tapped', 'Tapped'), ('LetterGiven', 'LetterGiven'), ('MeetingRequired', 'MeetingRequired'), ('Other', 'Other')], max_length=80, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('relationship_manager', models.CharField(blank=True, max_length=50, null=True)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('rating', models.CharField(blank=True, max_length=255, null=True)),
                ('feedback', models.CharField(blank=True, max_length=255, null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_corporate',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeGym',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('gym_type', models.CharField(blank=True, max_length=30, null=True)),
                ('category', models.CharField(blank=True, max_length=30, null=True)),
                ('gym_type_chain', models.CharField(blank=True, max_length=30, null=True)),
                ('chain_origin', models.CharField(blank=True, max_length=30, null=True)),
                ('totalmembership_perannum', models.IntegerField(blank=True, null=True)),
                ('footfall_day', models.IntegerField(blank=True, null=True)),
                ('footfall_weekend', models.IntegerField(blank=True, null=True)),
                ('advertising_media', models.CharField(blank=True, max_length=30, null=True)),
                ('dietchart_price', models.IntegerField(blank=True, null=True)),
                ('stall_price_day', models.IntegerField(blank=True, null=True)),
                ('stall_price_two_day', models.IntegerField(blank=True, null=True)),
                ('standee_price_week', models.IntegerField(blank=True, null=True)),
                ('standee_price_two_week', models.IntegerField(blank=True, null=True)),
                ('standee_price_month', models.IntegerField(blank=True, null=True)),
                ('standee_places', models.IntegerField(blank=True, null=True)),
                ('standee_location', models.CharField(blank=True, max_length=30, null=True)),
                ('banner_price_week', models.IntegerField(blank=True, null=True)),
                ('banner_price_month', models.IntegerField(blank=True, null=True)),
                ('banner_places', models.IntegerField(blank=True, null=True)),
                ('banner_location', models.CharField(blank=True, max_length=30, null=True)),
                ('flyer_price_month', models.IntegerField(blank=True, null=True)),
                ('flyer_distribution', models.CharField(blank=True, max_length=30, null=True)),
                ('poster_price_week', models.IntegerField(blank=True, null=True)),
                ('poster_price_month', models.IntegerField(blank=True, null=True)),
                ('poster_places', models.IntegerField(blank=True, null=True)),
                ('mirrorstrip_count', models.IntegerField(blank=True, null=True)),
                ('mirrorstrip_price_week', models.IntegerField(blank=True, null=True)),
                ('mirrorstrip_price_month', models.IntegerField(blank=True, null=True)),
                ('locker_count', models.IntegerField(blank=True, null=True)),
                ('locker_price_week', models.IntegerField(blank=True, null=True)),
                ('locker_price_month', models.IntegerField(blank=True, null=True)),
                ('wall_price_month', models.IntegerField(blank=True, null=True)),
                ('wall_price_three_month', models.IntegerField(blank=True, null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_gym',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeRetailShop',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('retail_shop_type', models.CharField(blank=True, choices=[('Toy Store', 'Toy Store'), ('Sports Goods', 'Sports Goods'), ('Electronic Goods', 'Electronic Goods'), ('Sanitary Goods', 'Sanitary Goods'), ('Grocery Goods', 'Grocery Goods'), ('Stationery Goods', 'Stationery Goods'), ('Merchandise Goods', 'Merchandise Goods'), ('Mobile Store', 'Mobile Store'), ('Mixed Store', 'Mixed Store'), ('Hypermart', 'Hypermart'), ('Jewelry Store', 'Jewelry Store'), ('Auto Dealership Store', 'Auto Dealership Store'), ('Shoes Store', 'Shoes Store'), ('Mall', 'Mall'), ('Gaming Zone', 'Gaming Zone'), ('FND (Food & Dining)', 'FND (Food & Dining)')], max_length=255, null=True)),
                ('size', models.FloatField(blank=True, null=True)),
                ('is_modern_trade', models.BooleanField(default=False)),
                ('is_traditional', models.BooleanField(default=False)),
                ('category_name', models.CharField(blank=True, max_length=255, null=True)),
                ('store_size', models.CharField(blank=True, max_length=250, null=True)),
                ('std_code', models.CharField(blank=True, max_length=250, null=True)),
                ('salutation', models.CharField(blank=True, max_length=250, null=True)),
                ('average_weekend', models.CharField(blank=True, max_length=250, null=True)),
                ('average_weekday', models.CharField(blank=True, max_length=250, null=True)),
                ('contact_name', models.CharField(blank=True, max_length=250, null=True)),
                ('contact_type', models.CharField(blank=True, max_length=250, null=True)),
                ('country_code', models.CharField(blank=True, max_length=250, null=True)),
                ('email', models.CharField(blank=True, max_length=250, null=True)),
                ('feedback', models.CharField(blank=True, max_length=250, null=True)),
                ('mobile', models.CharField(blank=True, max_length=250, null=True)),
                ('phone', models.CharField(blank=True, max_length=250, null=True)),
                ('landmark', models.CharField(blank=True, max_length=250, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('rating', models.CharField(blank=True, max_length=255, null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_type_retail_shop',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeSalon',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(max_length=3, null=True)),
                ('name', models.CharField(blank=True, max_length=70, null=True)),
                ('address1', models.CharField(blank=True, max_length=250, null=True)),
                ('address2', models.CharField(blank=True, max_length=250, null=True)),
                ('area', models.CharField(blank=True, max_length=255, null=True)),
                ('subarea', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=250, null=True)),
                ('state', models.CharField(blank=True, max_length=250, null=True)),
                ('zipcode', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('longitude', models.FloatField(blank=True, default=0.0, null=True)),
                ('locality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_rating', models.CharField(blank=True, max_length=50, null=True)),
                ('machadalo_index', models.CharField(blank=True, max_length=30, null=True)),
                ('bank_account_name', models.CharField(blank=True, max_length=250, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=250, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=30, null=True)),
                ('account_number', models.CharField(blank=True, max_length=250, null=True)),
                ('food_tasting_allowed', models.BooleanField(default=False)),
                ('sales_allowed', models.BooleanField(default=False)),
                ('salon_type', models.CharField(blank=True, db_column='SALON_TYPE', max_length=30, null=True)),
                ('category', models.CharField(blank=True, db_column='CATEGORY', max_length=30, null=True)),
                ('salon_type_chain', models.CharField(blank=True, db_column='SALON_TYPE_CHAIN', max_length=30, null=True)),
                ('footfall_day', models.IntegerField(blank=True, db_column='FOOTFALL_DAY', null=True)),
                ('footfall_week', models.IntegerField(blank=True, db_column='FOOTFALL_WEEK', null=True)),
                ('footfall_weekend', models.IntegerField(blank=True, db_column='FOOTFALL_WEEKEND', null=True)),
                ('isspaavailable', models.BooleanField(db_column='ISSPAAVAILABLE', default=False)),
                ('advertising_media', models.CharField(blank=True, db_column='AD_MEDIA', max_length=30, null=True)),
                ('shop_size', models.CharField(blank=True, db_column='SHOP_SIZE', max_length=30, null=True)),
                ('floor_size', models.CharField(blank=True, db_column='FLOOR_SIZE', max_length=30, null=True)),
                ('standee_price_week', models.IntegerField(blank=True, db_column='ST_PRICE_WEEK', null=True)),
                ('standee_price_weekend', models.IntegerField(blank=True, db_column='ST_PRICE_WEEKEND', null=True)),
                ('standee_places', models.IntegerField(blank=True, db_column='ST_PLACES', null=True)),
                ('standee_location', models.IntegerField(blank=True, db_column='ST_LOCATION', null=True)),
                ('banner_price_week', models.IntegerField(blank=True, db_column='BA_PRICE_WEEK', null=True)),
                ('banner_price_weekend', models.IntegerField(blank=True, db_column='BA_PRICE_WEEKEND', null=True)),
                ('banner_places', models.IntegerField(blank=True, db_column='BA_PLACES', null=True)),
                ('banner_location', models.IntegerField(blank=True, db_column='BA_LOCATION', null=True)),
                ('flyer_price_week', models.IntegerField(blank=True, db_column='FL_PRICE_WEEK', null=True)),
                ('flyer_distribution', models.IntegerField(blank=True, db_column='FL_DISTRIBUTION', null=True)),
                ('poster_price_week', models.IntegerField(blank=True, db_column='PO_PRICE_WEEK', null=True)),
                ('poster_price_weekend', models.IntegerField(blank=True, db_column='PO_PRICE_WEEKEND', null=True)),
                ('poster_places', models.IntegerField(blank=True, db_column='PO_PLACES', null=True)),
                ('mirrorstrip_price_week', models.IntegerField(blank=True, db_column='MS_PRICE_WEEK', null=True)),
                ('mirrorstrip_price_month', models.IntegerField(blank=True, db_column='MS_PRICE_MONTH', null=True)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_salon',
            },
        ),
        migrations.CreateModel(
            name='SupplierTypeSociety',
            fields=[
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('supplier_id', models.CharField(db_column='SUPPLIER_ID', db_index=True, max_length=20, primary_key=True, serialize=False)),
                ('supplier_code', models.CharField(db_column='SUPPLIER_CODE', max_length=3, null=True)),
                ('society_name', models.CharField(blank=True, db_column='SOCIETY_NAME', max_length=70, null=True)),
                ('society_address1', models.CharField(blank=True, db_column='SOCIETY_ADDRESS1', max_length=250, null=True)),
                ('society_address2', models.CharField(blank=True, db_column='SOCIETY_ADDRESS2', max_length=250, null=True)),
                ('society_zip', models.IntegerField(blank=True, db_column='SOCIETY_ZIP', null=True)),
                ('society_city', models.CharField(blank=True, db_column='SOCIETY_CITY', max_length=250, null=True)),
                ('society_state', models.CharField(blank=True, db_column='SOCIETY_STATE', max_length=250, null=True)),
                ('society_longitude', models.FloatField(blank=True, db_column='SOCIETY_LONGITUDE', default=0.0, null=True)),
                ('society_locality', models.CharField(blank=True, db_column='SOCIETY_LOCALITY', max_length=50, null=True)),
                ('society_subarea', models.CharField(blank=True, db_column='SOCIETY_SUBAREA', max_length=50, null=True)),
                ('society_latitude', models.FloatField(blank=True, db_column='SOCIETY_LATITUDE', default=0.0, null=True)),
                ('society_location_type', models.CharField(blank=True, db_column='SOCIETY_LOCATION_TYPE', max_length=50, null=True)),
                ('society_type_quality', models.CharField(blank=True, db_column='SOCIETY_TYPE_QUALITY', max_length=30, null=True)),
                ('society_type_quantity', models.CharField(blank=True, db_column='SOCIETY_TYPE_QUANTITY', max_length=30, null=True)),
                ('society_off', models.BooleanField(db_column='SOCIETY_OFF', default=False)),
                ('society_weekly_off', models.CharField(blank=True, db_column='SOCIETY_WEEKLY_OFF', max_length=30, null=True)),
                ('society_count', models.BooleanField(db_column='SOCIETY_COUNT', default=True)),
                ('society_ratings', models.BooleanField(db_column='SOCIETY_RATINGS', default=True)),
                ('flat_count', models.IntegerField(blank=True, db_column='FLAT_COUNT', null=True)),
                ('flat_count_type', models.CharField(blank=True, choices=[('1-150', '1-150'), ('151-400', '151-400'), ('401+', '401+')], max_length=55, null=True)),
                ('resident_count', models.IntegerField(blank=True, db_column='RESIDENT_COUNT', null=True)),
                ('vacant_flat_count', models.IntegerField(db_column='VACANT_FLAT_COUNT', null=True)),
                ('avg_household_occupants', models.IntegerField(db_column='AVG_HOUSEHOLD_OCCUPANTS', null=True)),
                ('service_household_count', models.IntegerField(db_column='SERVICE_HOUSEHOLD_COUNT', null=True)),
                ('working_women_count', models.IntegerField(db_column='WORKING_WOMEN_COUNT', null=True)),
                ('bachelor_tenants_allowed', models.CharField(db_column='BACHELOR_TENANTS_ALLOWED', max_length=5, null=True)),
                ('pg_flat_count', models.IntegerField(db_column='PG_FLAT_COUNT', null=True)),
                ('women_occupants', models.IntegerField(db_column='WOMEN_OCCUPANTS', null=True)),
                ('avg_pg_occupancy', models.IntegerField(db_column='AVG_PG_OCCUPANCY', null=True)),
                ('cars_count', models.IntegerField(blank=True, db_column='CARS_COUNT', null=True)),
                ('luxury_cars_count', models.IntegerField(blank=True, db_column='LUXURY_CARS_COUNT', null=True)),
                ('lift_count', models.IntegerField(blank=True, db_column='LIFT_COUNT', null=True)),
                ('machadalo_index', models.FloatField(blank=True, db_column='MACHADALO_INDEX', default=0.0, null=True)),
                ('average_rent', models.FloatField(blank=True, db_column='AVERAGE_RENT', null=True)),
                ('food_tasting_allowed', models.CharField(blank=True, db_column='FOOD_TASTING_ALLOWED', max_length=5, null=True)),
                ('events_occurance', models.CharField(blank=True, db_column='EVENTS_OCCURANCE', max_length=5, null=True)),
                ('preferred_business_type', models.CharField(blank=True, db_column='SOCIETIES_PREFERRED_BUSINESS_TYPE', max_length=50, null=True)),
                ('preferred_business_id', models.CharField(blank=True, db_column='SOCIETIES_PREFERRED_BUSINESS_ID', max_length=50, null=True)),
                ('business_type_not_allowed', models.CharField(blank=True, db_column='BUSINESS_TYPE_NOT_ALLOWED', max_length=50, null=True)),
                ('business_id_not_allowed', models.CharField(blank=True, db_column='BUSINESS_ID_NOT_ALLOWED', max_length=50, null=True)),
                ('referred_by', models.CharField(blank=True, db_column='REFERRED_BY', max_length=5, null=True)),
                ('contact_person_count', models.IntegerField(blank=True, db_column='CONTACT_PERSON_COUNT', null=True)),
                ('walking_area_available', models.CharField(blank=True, db_column='WALKING_AREA_AVAILABLE', max_length=45, null=True)),
                ('walking_area_size', models.CharField(blank=True, db_column='WALKING_AREA_SIZE', max_length=10, null=True)),
                ('count_0_5', models.IntegerField(blank=True, db_column='COUNT_0-5', null=True)),
                ('count_5_15', models.IntegerField(blank=True, db_column='COUNT_5-15', null=True)),
                ('count_15_25', models.IntegerField(blank=True, db_column='COUNT_15-25', null=True)),
                ('count_25_60', models.IntegerField(blank=True, db_column='COUNT_25-60', null=True)),
                ('count_60above', models.IntegerField(blank=True, db_column='count_60above', null=True)),
                ('age_group_0_6', models.IntegerField(blank=True, default=0)),
                ('age_group_7_18', models.IntegerField(blank=True, default=0)),
                ('flat_type_count', models.IntegerField(blank=True, db_column='FLAT_TYPE_COUNT', null=True)),
                ('flat_avg_size', models.IntegerField(blank=True, db_column='FLAT_AVG_SIZE', null=True)),
                ('flat_avg_rental_persqft', models.IntegerField(blank=True, db_column='FLAT_AVG_RENTAL_PERSQFT', null=True)),
                ('flat_sale_cost_persqft', models.IntegerField(blank=True, db_column='FLAT_SALE_COST_PERSQFT', null=True)),
                ('past_campaign_occurred', models.CharField(db_column='PAST_CAMPAIGN_OCCURRED', max_length=5, null=True)),
                ('past_collections_stalls', models.IntegerField(db_column='PAST_YEAR_COLLECTIONS_STALLS', null=True)),
                ('past_collections_car', models.IntegerField(db_column='PAST_YEAR_COLLECTIONS_CAR', null=True)),
                ('past_collections_poster', models.IntegerField(db_column='PAST_YEAR_COLLECTIONS_POSTER', null=True)),
                ('past_collections_banners', models.IntegerField(db_column='PAST_YEAR_COLLECTIONS_BANNERS', null=True)),
                ('past_collections_standee', models.IntegerField(db_column='PAST_YEAR_COLLECTIONS_STANDEE', null=True)),
                ('past_sponsorship_collection_events', models.IntegerField(db_column='PAST_YEAR_SPONSORSHIP_COLLECTION_EVENTS', null=True)),
                ('past_total_sponsorship', models.IntegerField(db_column='PAST_YEAR_TOTAL_SPONSORSHIP', null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='CREATED_ON')),
                ('total_ad_spaces', models.IntegerField(db_column='TOTAL_AD_SPACES', null=True)),
                ('tower_count', models.IntegerField(blank=True, db_column='TOWER_COUNT', null=True)),
                ('standee_count', models.IntegerField(blank=True, db_column='STANDEE_COUNT', null=True)),
                ('stall_count', models.IntegerField(blank=True, db_column='STALL_COUNT', null=True)),
                ('banner_count', models.IntegerField(blank=True, db_column='BANNER_COUNT', null=True)),
                ('total_campaign', models.IntegerField(blank=True, db_column='TOTAL_CAMPAIGN', null=True)),
                ('payment_details_available', models.BooleanField(db_column='PAYMENT_DETAILS_AVAILABLE', default=False)),
                ('age_of_society', models.FloatField(blank=True, db_column='AGE_OF_SOCIETY', null=True)),
                ('name_for_payment', models.CharField(blank=True, db_column='NAME_FOR_PAYMENT', max_length=100, null=True)),
                ('ifsc_code', models.CharField(blank=True, db_column='IFSC_CODE', max_length=100, null=True)),
                ('bank_name', models.CharField(blank=True, db_column='BANK_NAME', max_length=100, null=True)),
                ('account_no', models.BigIntegerField(blank=True, db_column='ACCOUNT_NUMBER', null=True)),
                ('street_furniture_available', models.BooleanField(db_column='STREET_FURNITURE_AVAILABLE', default=False)),
                ('stall_timing', models.CharField(blank=True, db_column='STALL_TIMING', max_length=10, null=True)),
                ('electricity_available', models.BooleanField(db_column='ELECTRICITY_AVAILABLE', default=False)),
                ('sound_available', models.BooleanField(db_column='SOUND_AVAILABLE', default=False)),
                ('daily_electricity_charges', models.IntegerField(blank=True, db_column='DAILY_ELECTRICITY_CHARGES', default=0, null=True)),
                ('poster_allowed_nb', models.BooleanField(db_column='POSTER_ALLOWED_NB', default=False)),
                ('poster_allowed_lift', models.BooleanField(db_column='POSTER_ALLOWED_LIFT', default=False)),
                ('standee_allowed', models.BooleanField(db_column='STANDEE_ALLOWED', default=False)),
                ('flier_allowed', models.BooleanField(db_column='FLIER_ALLOWED', default=False)),
                ('stall_allowed', models.BooleanField(db_column='STALL_ALLOWED', default=False)),
                ('car_display_allowed', models.BooleanField(db_column='CAR_DISPLAY_ALLOWED', default=False)),
                ('banner_allowed', models.BooleanField(db_column='BANNER_ALLOWED', default=False)),
                ('total_tenant_flat_count', models.IntegerField(blank=True, null=True)),
                ('landmark', models.CharField(blank=True, max_length=255, null=True)),
                ('feedback', models.CharField(blank=True, max_length=255, null=True)),
                ('supplier_status', models.CharField(choices=[('Tapped', 'Tapped'), ('LetterGiven', 'LetterGiven'), ('MeetingRequired', 'MeetingRequired'), ('Other', 'Other')], max_length=80, null=True)),
                ('comments', models.CharField(blank=True, max_length=255, null=True)),
                ('relationship_manager', models.CharField(blank=True, max_length=50, null=True)),
                ('rating', models.CharField(blank=True, max_length=255, null=True)),
                ('created_by', models.ForeignKey(blank=True, db_column='CREATED_BY', default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='societies', to=settings.AUTH_USER_MODEL)),
                ('representative', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'supplier_society',
            },
        ),
        migrations.CreateModel(
            name='SwimmingPoolInfo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('size_breadth', models.FloatField(blank=True, db_column='SIZE_BREADTH', default=0.0, null=True)),
                ('size_length', models.FloatField(blank=True, db_column='SIZE_LENGTH', default=0.0, null=True)),
                ('side_area', models.FloatField(blank=True, db_column='SIDE_AREA', default=0.0, null=True)),
                ('side_rentals', models.CharField(blank=True, db_column='SIDE_RENTALS', max_length=10, null=True)),
                ('timings_open', models.TimeField(blank=True, db_column='TIMINGS_OPEN', null=True)),
                ('timings_close', models.TimeField(blank=True, db_column='TIMINGS_CLOSE', null=True)),
                ('daily_price_society', models.FloatField(blank=True, db_column='DAILY_PRICE_SOCIETY', default=0.0, null=True)),
                ('daily_price_business', models.FloatField(blank=True, db_column='DAILY_PRICE_BUSINESS', default=0.0, null=True)),
                ('location', models.CharField(blank=True, db_column='LOCATION', max_length=50, null=True)),
                ('notice_board_count_per_swimming_pool', models.IntegerField(blank=True, db_column='NOTICE_BOARD_COUNT_PER_SWIMMING_POOL', null=True)),
                ('standee_location_count_per_swimming_pool', models.IntegerField(blank=True, db_column='STANDEE_LOCATION_COUNT_PER_SWIMMING_POOL', null=True)),
                ('stall_count_per_swimming_pool', models.IntegerField(blank=True, db_column='STALL_COUNT_PER_SWIMMING_POOL', null=True)),
                ('banner_count_per_swimming_pool', models.IntegerField(blank=True, db_column='BANNER_COUNT_PER_SWIMMING_POOL', null=True)),
                ('sitting', models.IntegerField(blank=True, db_column='SITTING', null=True)),
                ('inventory_status', models.CharField(blank=True, db_column='INVENTORY_STATUS', max_length=15, null=True)),
                ('audio_video_display_available', models.CharField(blank=True, db_column='AUDIO_VIDEO_DISPLAY_AVAILABLE', max_length=5, null=True)),
                ('electricity_charges_perhour', models.IntegerField(blank=True, db_column='ELECTRICITY_CHARGES_PERHOUR', null=True)),
                ('changing_room_available', models.CharField(blank=True, db_column='CHANGING_ROOM_AVAILABLE', max_length=5, null=True)),
                ('lit_unlit', models.CharField(blank=True, db_column='LIT_UNLIT', max_length=5, null=True)),
                ('photograph_1', models.CharField(blank=True, db_column='PHOTOGRAPH_1', max_length=45, null=True)),
                ('photograph_2', models.CharField(blank=True, db_column='PHOTOGRAPH_2', max_length=45, null=True)),
                ('supplier', models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='swimming_pools', to='v0.SupplierTypeSociety')),
            ],
            options={
                'db_table': 'swimming_pool_info',
            },
        ),
        migrations.CreateModel(
            name='UserAreas',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area', models.ForeignKey(db_column='area_id', on_delete=django.db.models.deletion.CASCADE, to='v0.CityArea')),
                ('user', models.ForeignKey(db_column='user_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='clusters', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_areas',
            },
        ),
        migrations.CreateModel(
            name='UserCities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.ForeignKey(db_column='city_id', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.City')),
                ('user', models.ForeignKey(db_column='user_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='cities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_cities',
            },
        ),
        migrations.CreateModel(
            name='UserInquiry',
            fields=[
                ('inquiry_id', models.AutoField(db_column='INQUIRY_ID', primary_key=True, serialize=False)),
                ('company_name', models.CharField(db_column='COMPANY_NAME', max_length=40)),
                ('contact_person_name', models.CharField(blank=True, db_column='CONTACT_PERSON_NAME', max_length=40, null=True)),
                ('email', models.CharField(blank=True, db_column='EMAIL', max_length=40, null=True)),
                ('phone', models.IntegerField(blank=True, db_column='PHONE', null=True)),
                ('inquiry_details', models.TextField(db_column='INQUIRY_DETAILS')),
            ],
            options={
                'db_table': 'user_inquiry',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_city_manager', models.BooleanField(db_column='is_city_manager', default=False)),
                ('is_cluster_manager', models.BooleanField(db_column='is_cluster_manager', default=False)),
                ('is_normal_user', models.BooleanField(db_column='is_normal_user', default=False)),
                ('society_form_access', models.BooleanField(db_column='society_form_access', default=False)),
                ('corporate_form_access', models.BooleanField(db_column='corporate_form_access', default=False)),
                ('created_by', models.ForeignKey(db_column='created_by', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', default=1, on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='WallInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('updated_at', models.DateTimeField(default=datetime.datetime(2016, 12, 1, 0, 0, tzinfo=utc), editable=False)),
                ('inventory_type_id', models.CharField(blank=True, db_column='INVENTORY_TYPE_ID', max_length=20)),
                ('adinventory_id', models.CharField(db_column='ADINVENTORY_ID', max_length=22)),
                ('wall_size', models.CharField(blank=True, db_column='WALL_SIZE', max_length=10, null=True)),
                ('wall_frame_size', models.CharField(blank=True, db_column='WALL_FRAME_SIZE', max_length=10, null=True)),
                ('wall_area', models.CharField(blank=True, db_column='WALL_AREA', max_length=10, null=True)),
                ('wall_type', models.CharField(blank=True, db_column='WALL_TYPE', max_length=20, null=True)),
                ('wall_internal_external', models.CharField(blank=True, db_column='WALL_INTERNAL_EXTERNAL', max_length=10, null=True)),
                ('wall_sides', models.CharField(blank=True, db_column='WALL_SIDES', max_length=10, null=True)),
                ('wall_monthly_price_society', models.FloatField(blank=True, db_column='WALL_MONTHLY_PRICE_SOCIETY', default=0.0, null=True)),
                ('wall_quarterly_price_society', models.FloatField(blank=True, db_column='WALL_QUARTERLY_PRICE_SOCIETY', default=0.0, null=True)),
                ('wall_monthly_price_business', models.FloatField(blank=True, db_column='WALL_MONTHLY_PRICE_BUSINESS', default=0.0, null=True)),
                ('wall_quarterly_price_business', models.FloatField(blank=True, db_column='WALL_QUARTERLY_PRICE_BUSINESS', default=0.0, null=True)),
                ('wall_location', models.CharField(blank=True, db_column='WALL_LOCATION', max_length=50, null=True)),
                ('wall_paint_allowed', models.CharField(blank=True, db_column='WALL_PAINT_ALLOWED', max_length=5, null=True)),
                ('wall_frame_status', models.CharField(blank=True, db_column='WALL_FRAME_STATUS', max_length=5, null=True)),
                ('wall_inventory_status', models.CharField(blank=True, db_column='WALL_INVENTORY_STATUS', max_length=15, null=True)),
                ('object_id', models.CharField(max_length=20, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('supplier', models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='walls', to='v0.SupplierTypeSociety')),
            ],
            options={
                'db_table': 'wall_inventory',
            },
        ),
        migrations.AddField(
            model_name='streetfurniture',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='street_furniture', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='stallinventory',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stalls', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='sportsinfra',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sports', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='societytower',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='towers', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='societymajorevents',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='society_events', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='societyinventorybooking',
            name='society',
            field=models.ForeignKey(db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_bookings', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='societyflat',
            name='tower',
            field=models.ForeignKey(blank=True, db_column='TOWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flats', to='v0.SocietyTower'),
        ),
        migrations.AddField(
            model_name='shortlistedspacesversion',
            name='space_mapping_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spaces_version', to='v0.SpaceMappingVersion'),
        ),
        migrations.AddField(
            model_name='shortlistedspaces',
            name='phase_no',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='v0.SupplierPhase'),
        ),
        migrations.AddField(
            model_name='shortlistedspaces',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='shortlistedspaces',
            name='space_mapping',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spaces', to='v0.SpaceMapping'),
        ),
        migrations.AddField(
            model_name='shortlistedspaces',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='shortlistedinventorypricingdetails',
            name='shortlisted_spaces',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ShortlistedSpaces'),
        ),
        migrations.AddField(
            model_name='shortlistedinventorypricingdetails',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='ratiodetails',
            unique_together={('supplier_id', 'machadalo_index')},
        ),
        migrations.AddField(
            model_name='proposalcentersuppliers',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='proposalcentersuppliers',
            name='supplier_content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='proposalcentersuppliers',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='proposalcentermappingversion',
            name='proposal_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='centers_version', to='v0.ProposalInfoVersion'),
        ),
        migrations.AddField(
            model_name='proposalcentermapping',
            name='proposal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='centers', to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='proposalcentermapping',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='printingcost',
            name='proposal_master_cost',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost'),
        ),
        migrations.AddField(
            model_name='pricemappingdefault',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='default_prices', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='pricemapping',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inv_prices', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='posterinventory',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='posterinventory',
            name='tower',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.SocietyTower'),
        ),
        migrations.AddField(
            model_name='poleinventory',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='poles', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='objectlevelpermission',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Profile'),
        ),
        migrations.AddField(
            model_name='noticeboarddetails',
            name='tower',
            field=models.ForeignKey(blank=True, db_column='TOWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notice_boards', to='v0.SocietyTower'),
        ),
        migrations.AddField(
            model_name='mailboxinfo',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mail_boxes', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='logisticoperationscost',
            name='proposal_master_cost',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost'),
        ),
        migrations.AddField(
            model_name='liftdetails',
            name='tower',
            field=models.ForeignKey(blank=True, db_column='TOWER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lifts', to='v0.SocietyTower'),
        ),
        migrations.AddField(
            model_name='inventorytypeversion',
            name='space_mapping_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_types_version', to='v0.SpaceMappingVersion'),
        ),
        migrations.AddField(
            model_name='inventorytype',
            name='space_mapping',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_types', to='v0.SpaceMapping'),
        ),
        migrations.AddField(
            model_name='inventorysummary',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventoy_summary', to='v0.SupplierTypeSociety', unique=True),
        ),
        migrations.AddField(
            model_name='inventorysummary',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventoryactivity',
            name='shortlisted_inventory_details',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ShortlistedInventoryPricingDetails'),
        ),
        migrations.AddField(
            model_name='imagemapping',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='ideationdesigncost',
            name='proposal_master_cost',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost'),
        ),
        migrations.AddField(
            model_name='hashtagimages',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='hashtagimages',
            name='content_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='genericexportfilename',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation'),
        ),
        migrations.AddField(
            model_name='genericexportfilename',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='genericexportfilename',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='generaluserpermission',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Profile'),
        ),
        migrations.AddField(
            model_name='flyerinventory',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flyers', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='flierthroughlobbyinfo',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flier_lobby', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='flattype',
            name='society',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flatTypes', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='filters',
            name='center',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalCenterMapping'),
        ),
        migrations.AddField(
            model_name='filters',
            name='proposal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='filters',
            name='supplier_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='filters',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventstaffingcost',
            name='proposal_master_cost',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost'),
        ),
        migrations.AddField(
            model_name='events',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='doortodoorinfo',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='door_to_doors', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='datasciencescost',
            name='proposal_master_cost',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalMasterCost'),
        ),
        migrations.AddField(
            model_name='corporateparkcompanylist',
            name='supplier_id',
            field=models.ForeignKey(blank=True, db_column='CORPORATEPARK_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='corporatecompany', to='v0.SupplierTypeCorporate'),
        ),
        migrations.AddField(
            model_name='corporatecompanydetails',
            name='company_id',
            field=models.ForeignKey(blank=True, db_column='COMPANY_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='companydetails', to='v0.CorporateParkCompanyList'),
        ),
        migrations.AddField(
            model_name='corporatebuilding',
            name='corporatepark_id',
            field=models.ForeignKey(blank=True, db_column='CORPORATE_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='corporatebuilding', to='v0.SupplierTypeCorporate'),
        ),
        migrations.AddField(
            model_name='companyfloor',
            name='company_details_id',
            field=models.ForeignKey(blank=True, db_column='COMPANY_DETAILS_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wingfloor', to='v0.CorporateCompanyDetails'),
        ),
        migrations.AddField(
            model_name='communityhallinfo',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='community_halls', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='commonareadetails',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ca', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='city',
            name='state_code',
            field=models.ForeignKey(db_column='STATE_CODE', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='statecode', to='v0.State'),
        ),
        migrations.AddField(
            model_name='campaignsocietymapping',
            name='society',
            field=models.ForeignKey(db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='campaigncomments',
            name='shortlisted_spaces',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ShortlistedSpaces'),
        ),
        migrations.AddField(
            model_name='campaigncomments',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='campaignassignment',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.ProposalInfo'),
        ),
        migrations.AddField(
            model_name='businesssubtypes',
            name='business_type',
            field=models.ForeignKey(db_column='BUSINESS_TYPE', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='business_subtypes', to='v0.BusinessTypes'),
        ),
        migrations.AddField(
            model_name='businessinfo',
            name='sub_type',
            field=models.ForeignKey(db_column='SUB_TYPE', on_delete=django.db.models.deletion.CASCADE, related_name='sub_type_set', to='v0.BusinessSubTypes'),
        ),
        migrations.AddField(
            model_name='businessinfo',
            name='type_name',
            field=models.ForeignKey(db_column='TYPE', on_delete=django.db.models.deletion.CASCADE, related_name='type_set', to='v0.BusinessTypes'),
        ),
        migrations.AddField(
            model_name='businessinfo',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bannerinventory',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='audits',
            name='society_booking',
            field=models.ForeignKey(db_column='SOCIETY_BOOKING_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audits', to='v0.SocietyInventoryBooking'),
        ),
        migrations.AddField(
            model_name='auditorsocietymapping',
            name='society',
            field=models.ForeignKey(db_column='SUPPLIER_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auditors', to='v0.SupplierTypeSociety'),
        ),
        migrations.AddField(
            model_name='auditdate',
            name='shortlisted_inventory',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.ShortlistedInventoryPricingDetails'),
        ),
        migrations.AddField(
            model_name='adinventorylocationmapping',
            name='location',
            field=models.ForeignKey(blank=True, db_column='INVENTORY_LOCATION_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inventory_locations', to='v0.InventoryLocation'),
        ),
        migrations.AddField(
            model_name='activitylog',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation'),
        ),
        migrations.AddField(
            model_name='activitylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountinfo',
            name='business',
            field=models.ForeignKey(db_column='BUSINESS_ID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to='v0.BusinessInfo'),
        ),
        migrations.AddField(
            model_name='accountinfo',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Organisation'),
        ),
        migrations.AddField(
            model_name='accountinfo',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Profile'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='v0.Role'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='societytower',
            unique_together={('tower_tag', 'supplier')},
        ),
        migrations.AlterUniqueTogether(
            name='societyflat',
            unique_together={('tower', 'flat_type')},
        ),
        migrations.AlterUniqueTogether(
            name='proposalcentermappingversion',
            unique_together={('proposal_version', 'center_name')},
        ),
        migrations.AlterUniqueTogether(
            name='proposalcentermapping',
            unique_together={('proposal', 'center_name')},
        ),
        migrations.AlterUniqueTogether(
            name='emailsettings',
            unique_together={('user', 'email_type')},
        ),
        migrations.AlterUniqueTogether(
            name='citysubarea',
            unique_together={('area_code', 'subarea_code')},
        ),
        migrations.AlterUniqueTogether(
            name='cityarea',
            unique_together={('area_code', 'city_code')},
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('state_code', 'city_code')},
        ),
    ]
